{"version":3,"sources":["index/App/Images/IndaysLogo.png","index/App/API/UserDataConstant.js","index/App/API/Mutations/Shifts.js","index/App/API/Queries/User.js","index/App/Styles/StyledComponents.js","index/App/API/Queries/Blackout.js","index/App/Screens/Overview.js","index/App/API/Queries/Shifts.js","index/App/Screens/Shiftswap.js","index/App/Functions/AutoPopConstant.js","index/App/Functions/AutoPopulation.js","index/App/API/Mutations/User.js","index/App/API/Mutations/Blackout.js","index/App/Screens/Schedule.js","index/App/Components/Auth.js","index/App/Screens/Account.js","firebase.js","index/App/Components/UsernameInput.js","index/App/Screens.js","index/App/Screens/Statistics.js","index/App/Screens/Admin.js","index/App/Screens/Logout.js","index/App/Components/Header.js","index/App/Components/Navbar.js","index/App/Components/ProtectedRoute.js","index/App/Screens/Login.js","index/serviceWorker.js","index/App/API/Client.js","index.js","index/App.js"],"names":["module","exports","eventData","UserData","UpdateUsersShifts","gql","AddTradeBoardShift","RemoveTradeBoardShift","AddPendingShift","AcceptPendingShift","DeclinePendingShift","GetUserByID","GetUserByFirebaseID","GetAllUsers","GetAllUsersId","Card","styled","div","TitleText","h1","SubtitleText","span","TextInput","input","props","inputColor","borderColor","PrimaryButton","button","Swatch","a","Color","color","Navlink","GetBlackouts","moment","locale","localizer","momentLocalizer","DraggableCalendar","withDragAndDrop","Calendar","blackoutDays","GetTradeBoardShifts","GetPendingShifts","SCHEDULEFORMULA","time","slot","SCHEDULE","WEEKLYMAX","DAILYMAX","weeklyMax","dailyMax","AutoPopulation","localStorage","getItem","console","log","autoPopulate","weekResult","forEach","item","index","concat","itemList","indexArray","canWork","id","data","usersArr","getUsers","dayArray","_id","preferences","firstName","start","end","value","startDate","Date","endDate","getDay","push","empID","emp","parseInt","Array","keys","dayResult","hour","split","minute","filteredEmployees","filter","getHours","Number","isInteger","max","length","shiftTime","assigned","highValueFilteredEmployees","random","taken","Math","floor","includes","splice","dayResultObj","prevEmployees","highValIndex","newObj","dayFinalResult","certainDay","certainMonth","employee","theirStartMinute","theirEndHour","noLongerScheduled","iter","theirStartHour","stillGoing","title","day","useQuery","loading","error","refetch","networkStatus","onClick","todo","UpdateUser","CreateUser","DeleteUser","ClockIn","ClockOut","CreateBlackout","AuthContext","React","createContext","AuthProvider","children","useState","user","setCurrentUser","Provider","setUser","totalPreferredTime","options","label","DAYS","fb","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","UsernameInput","style","containerStyle","onChange","as","appendEmail","setAppendEmail","handleTextChanged","text","Form","Group","Label","InputGroup","FormControl","placeholder","aria-label","target","autoComplete","type","Append","Text","className","Screens","name","path","component","myShifts","setMyShifts","blackoutDates","setBlackoutDates","userID","variables","notifyOnNetworkStatusChange","loading2","error2","data2","getDates","stopDate","dateArray","currentDate","addDays","prototype","days","date","this","valueOf","setDate","getDate","useEffect","temp","getBlackouts","onCompleted2","getUserByID","shifts","rest","onCompleted","useMutation","shiftsToPush","JSON","stringify","width","textAlign","position","fontSize","selectable","events","views","defaultView","Views","WEEK","defaultDate","onSelectEvent","event","window","confirm","some","blackoutDate","toDateString","alert","shiftID","height","dayPropGetter","i","arr","x","getMonth","getFullYear","backgroundColor","eventPropGetter","available","alignSelf","alignContent","slotPropGetter","border","alignItems","components","tradeBoardShifts","setTradeBoardShifts","pendingApprovalShifts","setPendingApprovalShifts","loading3","error3","data3","networkStatus2","shiftsToRemove","shiftsToApprove","acceptShift","declineShift","getTradeBoardShifts","full_user","temp2","getPendingShifts","fromUserID","toUserId","Event","handlePickUp","toUserID","handleApproval","userType","align","renderTradeBoard","renderApprovalBoard","myEventsList","setMyEventsList","colorPicked","setColorPicked","displayColorPicker","setDisplayColorPicker","blackoutStart","setBlackoutStart","blackoutEnd","setBlackoutEnd","AutoPopulationSchedule","setAutoPopulationSchedule","addBlackout","updateShifts","userData","handleSelect","prompt","hex","moveEvent","tempArr","resizeEvent","indexOf","handleDelete","deleteSpot","tempArray","handleBlackoutDate","blackoutStartDate","blackoutStartDate2","renderDatePicker","statename","functionName","selected","onSelect","minDate","maxDate","display","flexDirection","justifyContent","renderBlackout","e","toISOString","onSelectSlot","draggableAccessor","onEventDrop","onEventResize","fromChild","formattedForDB","shift","nextWeek","allShifts","currentWeek","myVar","Object","values","users","sendAutoPopulatedShiftsToDB","useContext","userInfo","setUserInfo","myPreferencesList","setMyPreferencesList","dropdownValue","setDropdownValue","copyFrom","setCopyFrom","copyTo","setCopyTo","update","prefArray","sort","b","reFormatPreferenceList","updateUser","renderRow","state","email","lastName","first","last","validation","startingDate","endingDate","newStart","getMinutes","getSeconds","newEnd","handlePreferenceCopy","toolbar","formats","dayFormat","culture","format","view","toString","setLoading","setEmail","success","setSuccess","password","setPassword","setFirstName","setLastName","setUserType","deleteEmail","setDeleteEmail","setError","onError","message","createUser","createLoading","deleteUser","deleteLoading","handleDeleteUser","preventDefault","formatEmail","handleCreateUser","auth","createUserWithEmailAndPassword","firebaseID","uid","firebaseEmail","genericAlert","onPress","variant","Alert","top","right","onClose","dismissible","Heading","onSubmit","Row","Col","controlId","Control","ListGroup","Item","active","disabled","clear","history","logo","require","Header","flex","marginRight","src","alt","Icon","size","Navbar","screensToRender","fontfamily","fontstyle","fontweight","listStyle","map","screen","marginBottom","exact","to","ProtectedRoute","Component","render","Login","userName","setUsername","forgot","setForgot","update1","clockInLoading","update2","clockOutLoading","useLazyQuery","getUserByFirebaseID","UserFromFirebaseID","getUserLoading","getLocation","navigator","geolocation","getCurrentPosition","location","coords","latitude","longitude","storedFirebaseID","setItem","formatUsername","handleLoginPressed","signInWithEmailAndPassword","handleResetPressed","sendPasswordResetEmail","borderRadius","Boolean","hostname","match","Client","ApolloClient","uri","ReactDOM","client","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fb79e943.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IndaysLogo.de1409c4.png\";","const eventData = ` title\nstart\nend\ncolor\nvalue\n_id\navailable\n`\n\nexport const UserData = `\n    _id\n    firebaseID\n    email\n    userType\n    firstName\n    lastName\n    preferences {${eventData}}\n    shifts {${eventData}}\n`\n","import { gql } from 'apollo-boost'\nimport { UserData } from '../UserDataConstant'\n\nexport const UpdateUsersShifts = gql`\n    mutation UpdateUsersShifts($users: [UpdateUserShift!]!) {\n        updateUsersShifts(users: $users) {\n            _id\n        }\n    }\n`\n\nexport const AddTradeBoardShift = gql`\n    mutation addTradeBoardShift(\n        $shiftID: String!,\n        $userID: String!\n        ) {\n        addTradeBoardShift(\n            shiftID: $shiftID,\n            userID: $userID\n        ){_id}\n    }\n`\n\nexport const RemoveTradeBoardShift = gql`\n    mutation removeTradeBoardShift(\n        $shiftID: String!,\n        $userID: String!\n        ) {\n        removeTradeBoardShift(\n            shiftID: $shiftID,\n            userID: $userID\n        )\n    }\n`\n\nexport const AddPendingShift = gql`\n    mutation addPendingShift(\n        $toUserID: String!,\n        $fromUserID: String!,\n        $shiftID: String!\n        ) {\n        addPendingShift(\n            toUserID: $toUserID,\n            fromUserID: $fromUserID,\n            shiftID: $shiftID\n        )\n    }\n`\n\nexport const AcceptPendingShift = gql`\n    mutation acceptPendingShift(\n        $shiftID: String!\n        ) {\n        acceptPendingShift(\n            shiftID: $shiftID\n        )\n    }\n`\n\nexport const DeclinePendingShift = gql`\n    mutation declinePendingShift(\n        $shiftID: String!\n        ) {\n        declinePendingShift(\n            shiftID: $shiftID\n        )\n    }\n`","import { gql } from 'apollo-boost'\nimport { UserData } from '../UserDataConstant'\nexport const GetUserByID = gql`\n    query getUserByID($id: String!) {\n        getUserByID(id: $id) {\n            ${UserData}\n        }\n    }\n`\nexport const GetUserByFirebaseID = gql`\n    query getUserByFirebaseID($firebaseID: String!) {\n        getUserByFirebaseID(firebaseID: $firebaseID) {\n            ${UserData}\n        }\n    }\n`\nexport const GetAllUsers = gql`\n    query {\n        getUsers {\n            ${UserData}\n        }\n    }\n`\n\nexport const GetAllUsersId = gql`\n    query {\n        getUsers {\n            _id\n        }\n    }\n`\n","import styled from 'styled-components'\n\nexport const Card = styled.div`\n    background: white;\n    padding: 2%;\n    border: 3px solid rgba(133, 133, 133, 0.14);\n    box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.45);\n    border-radius: 25px;\n`\n\nexport const TitleText = styled.h1`\n    font-family: 'Poppins';\n    font-size: 72px;\n    font-weight: bold;\n    padding: 1%;\n    margin: 0;\n    background: linear-gradient(#ff7a7a, #510808);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n`\n\nexport const SubtitleText = styled.span`\n    font-family: Poppins;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    line-height: 30px;\n    position: relative;\n    //top: 277px;\n    color: #8c8989;\n`\n\nexport const TextInput = styled.input`\n    font-family: Poppins;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    padding: 0.5em;\n    padding-left: 3em;\n    margin: 1em;\n    color: ${(props) => props.inputColor || '#235CB9'};\n    background: transparent;\n    width: 20vw;\n    height: 2.3em;\n    border: none;\n    border-bottom: 1px solid;\n    &:focus {\n        border-bottom: 1px solid #1cd1a1; // <Thing> when hovered\n    }\n    border-color: ${(props) => props.borderColor || '#C7C7C7'};\n`\n\nexport const PrimaryButton = styled.button`\n    background: linear-gradient(180deg, #303030 0%, #060303 100%);\n    border-radius: 10px;\n    margin: 1em;\n    width: 247px;\n    height: 39px;\n    color: white;\n    font-size: 16px;\n    border: 0px;\n    text-align: center;\n`\n\nexport const Hyperlink = styled.a`\n    font-family: Poppins;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    color: #3385ff;\n    text-decoration: underline;\n`\n\nexport const Swatch = styled.div`\n    padding: 5px;\n    background: #fff;\n    border-radius: 1px;\n    boxshadow: '0 0 0 1px rgba(0,0,0,.1)';\n    display: inline-block;\n    cursor: pointer;\n`\n\nexport const Color = styled.div`\n    width: 36px;\n    height: 14px;\n    border-radius: 2px;\n    margin: 2px;\n    background: ${(props) => (props.color ? props.color : 'black')};\n`\nexport const Navlink = styled.button`\n    background: linear-gradient(179.63deg, #ff7a7a -13.56%, #510808 158.3%);\n    width: 12vw;\n    height: 6vh;\n    color: white;\n    font-family: Poppins;\n    font-size: 1.2rem;\n    border-radius: 4.5vw;\n    align-self: 'flex-start';\n    justify-self: 'flex-start';\n`\n","import { gql } from 'apollo-boost'\r\nimport { UserData } from '../UserDataConstant'\r\n\r\nexport const GetBlackouts = gql`\r\n    query {\r\n        getBlackouts {\r\n            _id\r\n            start\r\n            end\r\n        }\r\n    }\r\n`","import React, { useState, useEffect, useContext } from 'react'\nimport { useMutation, useQuery } from '@apollo/react-hooks'\nimport { Calendar, momentLocalizer, Views } from 'react-big-calendar'\nimport moment from 'moment'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\nimport { AddTradeBoardShift } from '../API/Mutations/Shifts'\nimport { GetUserByID } from '../API/Queries/User'\nimport {\n    Card,\n    CardTitle,\n    Hyperlink,\n    PrimaryButton,\n    SubtitleText,\n    TextInput,\n    TitleText,\n} from './../Styles/StyledComponents'\nimport {GetBlackouts} from './../API/Queries/Blackout'\n\n\nmoment.locale('en')\nconst localizer = momentLocalizer(moment)\nconst DraggableCalendar = withDragAndDrop(Calendar)\n\nlet blackoutDays = []\n\nexport default function Overview(props) {\n\t\n\tconst [myShifts, setMyShifts] = useState([])\n    const [blackoutDates, setBlackoutDates] = useState([])\n\n\tlet userID = localStorage.getItem('currentUserID')\n\n\tconst { loading, error, data, refetch, networkStatus} = useQuery(\n        GetUserByID,\n        {\n            variables: { id: userID },\n            notifyOnNetworkStatusChange: true\n        }\n    )\n\n\tconst {\n        loading: loading2,\n        error: error2,\n        data: data2,\n        refetch: refetch2,\n        networkStatus: netStat2,\n    } = useQuery(GetBlackouts)\n\n    Date.prototype.addDays = function (days) {\n        var date = new Date(this.valueOf())\n        date.setDate(date.getDate() + days)\n        return date\n    }\n\n    function getDates(startDate, stopDate) {\n        var dateArray = new Array()\n        var currentDate = startDate\n        while (currentDate <= stopDate) {\n            dateArray.push(new Date(currentDate))\n            currentDate = currentDate.addDays(1)\n        }\n        return dateArray\n    }\n\n\tuseEffect(() => {\n        const onCompleted = data => {\n\t\t\tlet temp = []\n\t\t\tdata.getUserByID.shifts.forEach(({ start, end, ...rest }) => {\n\t\t\t\tlet startDate = new Date(start)\n\t\t\t\tlet endDate = new Date(end)\n\t\t\t\ttemp.push({ start: startDate, end: endDate, ...rest })\n\t\t\t})\n\t\t\tsetMyShifts(temp)\n\t\t}\n\t\t\n\t\tconst onCompleted2 = data2 => {\n\t\t\tlet temp = []\n\t\t\t//console.log('GOT HERE')\n\t\t\tdata2.getBlackouts.forEach(({start, end}) => {\n                let startDate = new Date(start)\n                let endDate = new Date(end)\n                //console.log(startDate, '\\n', endDate)\n                temp.push({start: startDate, end: endDate})\n                //console.log(temp)\n            })\n            //console.log(temp)\n\n            temp.forEach(({start, end}) => {\n                blackoutDays.push(...getDates(start, end))\n            })\n\n            setBlackoutDates(temp)\n\t\t\t//console.log(blackoutDates)\n\t\t}\n\n        if (!loading2 && !error2) onCompleted2(data2)\n        if (!loading && !error) onCompleted(data)\n    }, [loading, data, error, loading2, data2, error2])\n\n\tconst Event = ({ event }) => {\n        return <p style={{ color: 'yellow' }}>{event.title}</p>\n    }\n\n\tconst [shiftsToPush] = useMutation(AddTradeBoardShift)\n\t\n\tif (loading) return <p>Loading...</p>\n    if (error) return <p>Error :( {JSON.stringify(error)}</p>\n    if (networkStatus === 4) return <p>Refetching...</p>\n\n    \n\t//Need to add blackout here!!!\n\tconst handleDrop = (event) => {\n        const check = window.confirm(\n            '\\nDo you want to drop this shift: Ok - YES, Cancel - NO'\n        )\n        if (check) {\n            const isUnableToBeDropped = blackoutDays.some((blackoutDate) => {\n                //console.log(typeof blackoutDate, typeof event)\n                //console.log(blackoutDate, event.start)\n                return blackoutDate.toDateString() === event.start.toDateString() || blackoutDate.toDateString() === event.end.toDateString()\n            })\n\n            if(!isUnableToBeDropped)\n            {\n                shiftsToPush({\n                    variables: { userID: userID, shiftID: event._id },\n                })\n                event.color = 'darkred'\n            }\n            else\n            {\n                alert('You are unable to drop your shift on this day.')\n            }\n        }\n    }\n\n\tconst handleBlackoutDate = (date) => {\n        //console.log(blackoutDays)\n        for(let i in blackoutDates)\n        {\n            //console.log(blackoutDates[i].start.toISOString(), '\\n', blackoutDates[i].end.toISOString())\n            let blackoutStartDate = blackoutDates[i].start\n            let blackoutStartDate2 = blackoutDates[i].end\n\n            let arr = getDates(blackoutStartDate, blackoutStartDate2)\n\n            for (let x in arr) {\n                if (\n                    date.getDate() === arr[x].getDate() &&\n                    date.getMonth() === arr[x].getMonth() &&\n                    date.getFullYear() === arr[x].getFullYear()\n                ) {\n                    return {\n                        style: {\n                            backgroundColor: '#000',\n                        },\n                    }\n                }\n            }\n        }\n    }\n\n\treturn (\n\t\t<Card style={{\n            width: '1500px' }}>\n\t\t<div>\n\t\t\t<TitleText style={{\n                    textAlign: 'left',\n                    position: 'flex',\n                    fontSize: '48px',\n                    //clear:'left'\n                }}>Overview</TitleText>\n\t\t\t{/* <button onClick = {() => console.log(tradeBoardShifts)}>\n\t\t\tCLICK ME\n\t\t\t</button> */}\n\t\t\t{/* <p>\n\t\t\t\t{myShifts.length}\n\t\t\t</p>\n\t\t\t<button onClick={()=>console.log(myShifts)}> text </button> */}\n\t\t\t<DraggableCalendar\n\t\t\t\tselectable\n\t\t\t\tlocalizer={localizer}\n\t\t\t\tevents={myShifts}\n\t\t\t\tviews={['month', 'week']}\n\t\t\t\tdefaultView={Views.WEEK}\n\t\t\t\tdefaultDate={new Date(2020, 2, 30)}\n\t\t\t\tonSelectEvent={handleDrop}\n\t\t\t\t//onSelectSlot={handleSelect}\n\t\t\t\tstyle={{ height: '80vh', width: '1450px'}}\n\t\t\t\tdayPropGetter={handleBlackoutDate}\n\t\t\t\teventPropGetter={event => ({\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tbackgroundColor: event.available ? 'darkred' : event.color,\n\t\t\t\t\t\talignSelf: 'center',\n\t\t\t\t\t\talignContent: 'center'\n\t\t\t\t\t}\n\t\t\t\t})}\n\t\t\t\tslotPropGetter={() => ({\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\t// backgroundColor: 'red',\n\t\t\t\t\t\t// borderColor: 'red'\n\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t// display: 'flex',\n\t\t\t\t\t\talignItems: 'center'\n\t\t\t\t\t}\n\t\t\t\t})}\n\t\t\t\t// titleAccessor={function(e) {\n\t\t\t\t// \tconsole.log(e);\n\t\t\t\t// \treturn e.title;\n\t\t\t\t// }}\n\t\t\t\tcomponents={{\n\t\t\t\t\tevent: Event\n\t\t\t\t}}\n\t\t\t\t//draggableAccessor={event => true}\n\t\t\t\t//onEventDrop={moveEvent}\n\t\t\t/>\n\t\t</div>\n\t\t</Card>\n\t)\n}","import { gql } from 'apollo-boost'\r\nimport { UserData } from '../UserDataConstant'\r\n\r\nexport const GetTradeBoardShifts = gql`\r\n    query {\r\n        getTradeBoardShifts {\r\n            _id\r\n            title\r\n            start\r\n            end\r\n            color\r\n            available\r\n            full_user{_id}\r\n        }\r\n    }\r\n`\r\n\r\nexport const GetPendingShifts = gql`\r\n    query {\r\n        getPendingShifts {\r\n            _id\r\n            title\r\n            start\r\n            end\r\n            color\r\n            available\r\n            fromUserID\r\n            toUserID\r\n        }\r\n    }\r\n`","import React, { useState, useEffect, useRef } from 'react'\nimport { useMutation, useQuery } from '@apollo/react-hooks'\nimport { Calendar, momentLocalizer, Views } from 'react-big-calendar'\nimport moment from 'moment'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\nimport { UpdateUsersShifts, RemoveTradeBoardShift, AddPendingShift, AcceptPendingShift, DeclinePendingShift } from '../API/Mutations/Shifts'\nimport { GetAllUsers, GetUserByID } from '../API/Queries/User'\nimport {\n    Card,\n    CardTitle,\n    Hyperlink,\n    PrimaryButton,\n    SubtitleText,\n    TextInput,\n    TitleText,\n} from './../Styles/StyledComponents'\nimport {GetTradeBoardShifts, GetPendingShifts} from '../API/Queries/Shifts'\nimport { Button } from 'semantic-ui-react'\n\nmoment.locale('en')\nconst localizer = momentLocalizer(moment)\nconst DraggableCalendar = withDragAndDrop(Calendar)\n\nexport default function Shiftswap(props) {\n\tconst [tradeBoardShifts, setTradeBoardShifts] = useState([])\n\tconst [pendingApprovalShifts, setPendingApprovalShifts] = useState([])\n\n\tlet userID = localStorage.getItem('currentUserID')\n\t\n\tconst {\n        loading: loading,\n        error: error,\n        data: data,\n        refetch: refetch,\n        networkStatus: netStat,\n\t} = useQuery(GetTradeBoardShifts)\n\t\n\tconst {\n        loading: loading3,\n        error: error3,\n        data: data3,\n        refetch: refetch3,\n        networkStatus: netStat3,\n    } = useQuery(GetPendingShifts)\n\n\tconst { loading: loading2, error: error2, data: data2, refetch: refetch2, networkStatus: networkStatus2 } = useQuery(\n        GetUserByID,\n        {\n            variables: { id: userID },\n            notifyOnNetworkStatusChange: true\n        }\n\t)\n\t\n\tconst [shiftsToRemove] = useMutation(RemoveTradeBoardShift)\n\tconst [shiftsToApprove] = useMutation(AddPendingShift)\n\tconst [acceptShift] = useMutation(AcceptPendingShift)\n\tconst [declineShift] = useMutation(DeclinePendingShift)\n\n\tuseEffect(() => {\n        const onCompleted = data => {\n\t\t\tlet temp = []\n\t\t\t//console.log('GOT HERE')\n\t\t\tdata.getTradeBoardShifts.forEach(({ title, start, end, color, _id , full_user}) => {\n\t\t\t\tlet startDate = new Date(start)\n\t\t\t\tlet endDate = new Date(end)\n\t\t\t\ttemp.push({ title, start: startDate, end: endDate, color, _id, full_user })\n\t\t\t})\n\t\t\tsetTradeBoardShifts(temp)\n\t\t\t//console.log(tradeBoardShifts)\n\t\t}\n\t\tconst onCompleted2 = data3 => {\n\t\t\tlet temp2 = []\n\t\t\tdata3.getPendingShifts.forEach(({ title, start, end, color, _id, fromUserID, toUserId}) => {\n\t\t\t\tlet startDate = new Date(start)\n\t\t\t\tlet endDate = new Date(end)\n\t\t\t\ttemp2.push({ title, start: startDate, end: endDate, color, _id, fromUserID, toUserId })\n\t\t\t})\n\t\t\tsetPendingApprovalShifts(temp2)\n\t\t\t//console.log(pendingApprovalShifts)\n        }\n\t\tif (!loading && !error) onCompleted(data)\n\t\tif (!loading3 && !error3) onCompleted2(data3)\n    }, [loading, data, error, loading3, data3, error3])\n\n\tconst Event = ({ event }) => {\n        return <p style={{ color: 'yellow' }}>{event.title}</p>\n    }\n\n\t// const { loading, error, data: userData, refetch, networkStatus } = useQuery(__________)\n\t\n\t//To be used for getting all users\n\t// const { loading, error, data, refetch, networkStatus } = useQuery(GetAllUsers)\n\n\t//To be used for ensuring user with current ID is an admin\n\t\n\tif (loading2) return <p>Loading...</p>\n    if (error2) return <p>Error :( {JSON.stringify(error2)}</p>\n    if (networkStatus2 === 4) return <p>Refetching...</p>\n\n\tconst handlePickUp = event => {\n        const check = window.confirm(\n            '\\nDo you want to pickup this shift: Ok - YES, Cancel - NO'\n        )\n        if (check) {\n\t\t\tshiftsToApprove({ variables: { toUserID: userID, fromUserID: event.full_user._id, shiftID: event._id } })\n        }\n\t}\n\t\n\tconst handleApproval = event => {\n        const check = window.confirm(\n            '\\nDo you want to approve this shift pickup: Ok - YES, Cancel - NO'\n        )\n        if (check) {\n\t\t\tacceptShift({ variables: { shiftID: event._id } })\n\t\t\tshiftsToRemove({ variables: {shiftID: event._id, userID: event.fromUserID }})\t\t\t\n\t\t\tconsole.log('Shift swap has been approved')\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdeclineShift({ variables: { shiftID: event._id } })\n\t\t\tconsole.log('Shift was not approved')\n\t\t}\n    }\n\n\tconst renderTradeBoard = () => {\t\n\t\tif(data2.getUserByID.userType !== 'Admin')\n\t\t{\n\t\t\treturn(\n\t\t\t\t<DraggableCalendar\n\t\t\t\t\tselectable\n\t\t\t\t\tlocalizer={localizer}\n\t\t\t\t\tevents={tradeBoardShifts}\n\t\t\t\t\tviews={['month', 'week']}\n\t\t\t\t\tdefaultView={Views.WEEK}\n\t\t\t\t\tdefaultDate={new Date(2020, 1, 25)}\n\t\t\t\t\tonSelectEvent={handlePickUp}\n\t\t\t\t\t//onSelectSlot={handleSelect}\n\t\t\t\t\tstyle={{ align: 'center', height: '80vh', width: '1450px'}}\n\t\t\t\t\t//dayPropGetter={handleBlackoutDate}\n\t\t\t\t\teventPropGetter={event => ({\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tbackgroundColor: event.color,\n\t\t\t\t\t\t\talignSelf: 'center',\n\t\t\t\t\t\t\talignContent: 'center'\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t\tslotPropGetter={() => ({\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t// backgroundColor: 'red',\n\t\t\t\t\t\t\t// borderColor: 'red'\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t// display: 'flex',\n\t\t\t\t\t\t\talignItems: 'center'\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t\t// titleAccessor={function(e) {\n\t\t\t\t\t// \tconsole.log(e);\n\t\t\t\t\t// \treturn e.title;\n\t\t\t\t\t// }}\n\t\t\t\t\tcomponents={{\n\t\t\t\t\t\tevent: Event\n\t\t\t\t\t}}\n\t\t\t\t\t//draggableAccessor={event => true}\n\t\t\t\t\t//onEventDrop={moveEvent}\n\t\t\t\t/>\n\t\t\t)\n\t\t}\n\t}\n\n\tconst renderApprovalBoard = () => {\n\t\tif(data2.getUserByID.userType === 'Admin')\n\t\t{\n\t\t\treturn(\n\t\t\t\t<DraggableCalendar\n\t\t\t\t\tselectable\n\t\t\t\t\tlocalizer={localizer}\n\t\t\t\t\tevents={pendingApprovalShifts}\n\t\t\t\t\tviews={['month', 'week']}\n\t\t\t\t\tdefaultView={Views.WEEK}\n\t\t\t\t\tdefaultDate={new Date(2020, 1, 25)}\n\t\t\t\t\tonSelectEvent={handleApproval}\n\t\t\t\t\t//onSelectSlot={handleSelect}\n\t\t\t\t\tstyle={{ align: 'center', height: '80vh', width: '1450px'}}\n\t\t\t\t\t//dayPropGetter={handleBlackoutDate}\n\t\t\t\t\teventPropGetter={event => ({\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tbackgroundColor: event.color,\n\t\t\t\t\t\t\talignSelf: 'center',\n\t\t\t\t\t\t\talignContent: 'center'\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t\tslotPropGetter={() => ({\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t// backgroundColor: 'red',\n\t\t\t\t\t\t\t// borderColor: 'red'\n\t\t\t\t\t\t\tborder: 'none',\n\t\t\t\t\t\t\t// display: 'flex',\n\t\t\t\t\t\t\talignItems: 'center'\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t\t// titleAccessor={function(e) {\n\t\t\t\t\t// \tconsole.log(e);\n\t\t\t\t\t// \treturn e.title;\n\t\t\t\t\t// }}\n\t\t\t\t\tcomponents={{\n\t\t\t\t\t\tevent: Event\n\t\t\t\t\t}}\n\t\t\t\t\t//draggableAccessor={event => true}\n\t\t\t\t\t//onEventDrop={moveEvent}\n\t\t\t\t/>\n\t\t\t)\n\t\t}\n\t}\n\n\treturn (\n\t\t<Card style={{\n            width: '1500px' }}>\n\t\t<div>\n\t\t\t<TitleText style={{\n                    textAlign: 'left',\n                    position: 'flex',\n                    fontSize: '48px',\n                    //clear:'left'\n                }}>Shiftswap</TitleText>\n\t\t\t{/* <button onClick = {() => console.log(tradeBoardShifts)}>\n\t\t\tCLICK ME\n\t\t\t</button> */}\n\t\t\t{renderTradeBoard()}\n\t\t\t{renderApprovalBoard()}\n\t\t</div>\n\t\t</Card>\n\t)\n}\n","const SCHEDULEFORMULA = [\n    [\n        //SUNDAY\n        { time: '9:00', slot: 1 },\n        { time: '10:00', slot: 1 },\n        { time: '11:00', slot: 2 },\n        { time: '12:00', slot: 2 },\n        { time: '13:00', slot: 2 },\n        { time: '14:00', slot: 2 },\n        { time: '15:00', slot: 2 },\n        { time: '16:00', slot: 2 },\n        { time: '17:00', slot: 2 },\n        { time: '18:00', slot: 2 },\n        { time: '19:00', slot: 2 },\n        { time: '20:00', slot: 2 },\n        { time: '21:00', slot: 1 },\n        { time: '22:00', slot: 1 },\n        { time: '22:30', slot: 1 },\n    ],\n    [\n        //MON - THU\n        { time: '7:30', slot: 2 },\n        { time: '8:00', slot: 2 },\n        // {time: '08:30',slot: 2},\n        { time: '9:00', slot: 2 },\n        // {time: '09:30',slot: 2}, \n        { time: '10:00', slot: 2 },\n        // {time: '10:30',slot: 2}, \n        { time: '11:00', slot: 3 },\n        // {time: '11:30',slot: 3}, \n        { time: '12:00', slot: 3 },\n        // {time: '12:30',slot: 3}, \n        { time: '13:00', slot: 3 },\n        // {time: '13:30',slot: 3}, \n        { time: '14:00', slot: 3 },\n        // {time: '14:30',slot: 3}, \n        { time: '15:00', slot: 3 },\n        // {time: '15:30',slot: 3}, \n        { time: '16:00', slot: 3 },\n        // {time: '16:30',slot: 3}, \n        { time: '17:00', slot: 3 },\n        // {time: '17:30',slot: 3}, \n        { time: '18:00', slot: 3 },\n        // {time: '18:30',slot: 3}, \n        { time: '19:00', slot: 2 },\n        // {time: '19:30',slot: 2}, \n        { time: '20:00', slot: 2 },\n        // {time: '20:30',slot: 2}, \n        { time: '21:00', slot: 2 },\n        // {time: '21:30',slot: 2}, \n        { time: '22:00', slot: 2 },\n        // {time: '22:30',slot: 2}, \n        { time: '23:00', slot: 1 },\n        // {time: '23:30',slot: 1}, \n    ],\n    [\n        //FRIDAY\n        { time: '7:30', slot: 2 },\n        { time: '8:00', slot: 2 },\n        { time: '9:00', slot: 2 },\n        { time: '10:00', slot: 2 },\n        // {time:'10:30' ,slot: 2},\n        { time: '11:00', slot: 3 },\n        { time: '12:00', slot: 3 },\n        { time: '13:00', slot: 3 },\n        { time: '14:00', slot: 3 },\n        { time: '15:00', slot: 3 },\n        // {time:'15:30' ,slot: 3},\n        { time: '16:00', slot: 2 },\n        { time: '17:00', slot: 2 },\n        { time: '18:00', slot: 2 },\n        { time: '19:00', slot: 2 },\n    ],\n    [\n        //SATURDAY\n        { time: '10:00', slot: 2 },\n        { time: '11:00', slot: 2 },\n        { time: '12:00', slot: 2 },\n        { time: '13:00', slot: 2 },\n        { time: '14:00', slot: 2 },\n        { time: '15:00', slot: 2 },\n        { time: '16:00', slot: 2 },\n        { time: '17:00', slot: 2 },\n    ],\n]\n\nexport const SCHEDULE = [\n    SCHEDULEFORMULA[0],\n    SCHEDULEFORMULA[1],\n    SCHEDULEFORMULA[1],\n    SCHEDULEFORMULA[1],\n    SCHEDULEFORMULA[1],\n    SCHEDULEFORMULA[2],\n    SCHEDULEFORMULA[3]\n]","import { useMutation, useQuery } from '@apollo/react-hooks'\nimport { GetAllUsers } from '../API/Queries/User'\nimport React, { useState } from 'react'\nimport {\n        Card,\n        Hyperlink,\n        PrimaryButton,\n        SubtitleText,\n        TextInput,\n        TitleText\n} from './../Styles/StyledComponents'\nimport { SCHEDULE } from './AutoPopConstant'\n\nconst checkWeekly = () => {\n        if(localStorage.getItem('currentWeeklyMax'))\n        {\n                console.log(localStorage.getItem('currentWeeklyMax'))\n                return localStorage.getItem('currentWeeklyMax')\n        }\n        else\n        {\n                console.log('DIDNT USE LOCAL')\n                return 20\n        }\n}\n\nconst checkDaily = () => {\n        if(localStorage.getItem('currentDailyMax'))\n        {\n                console.log(localStorage.getItem('currentDailyMax'))\n                return localStorage.getItem('currentDailyMax')\n        }\n        else\n        {\n                console.log('DIDNT USE LOCAL')\n                return 7\n        }\n}\n\nlet WEEKLYMAX = 0\nlet DAILYMAX = 0\n\n/*\n        Per Shift\n*/\n//InClass - -100\n//Unpreferred - -1\n//Neutral - -0\n//Preferred - 1\n\n/*\n        Per Employee\n*/\n//Employee value - [0-4]\n\n\n/*\n        Special Case\n*/\n//inBetween Class && Preferred - 2\n//inBetween Class && Neutral - 1\n\nlet weeklyMax = {}\nlet dailyMax = {}\n\n\nexport default function AutoPopulation(props) {\n\n        WEEKLYMAX = checkWeekly()\n        DAILYMAX = checkDaily()\n        console.log(WEEKLYMAX)\n        console.log(DAILYMAX)\n        \n        const day = (itemList, indexArray) => {\n\n                const canWork = (id) => {\n                        console.log('canwork');\n\n                        if (dailyMax[id] < DAILYMAX && weeklyMax[id] < WEEKLYMAX) {\n                                dailyMax[id]++\n                                weeklyMax[id]++\n                                return true\n                        }\n                        else return false\n                }\n\n                console.log('----------DAY-----------', indexArray)\n                console.log('DATA', data);\n\n                let usersArr = data.getUsers\n                let dayArray = []\n\n                //GETTING USERS' PREFERENCES ON THAT DAY 0-6\n                usersArr.forEach(({ _id, preferences, firstName }) => {\n\n                        dailyMax[_id] = 0\n                        if (!(_id in weeklyMax)) weeklyMax[_id] = 0\n\n\n                        preferences.forEach(({ start, end, value }) => {\n                                let startDate = new Date(start)\n                                let endDate = new Date(end)\n                                if (startDate.getDay() === indexArray) {\n                                        dayArray.push({ empID: _id, emp: firstName, startDate, endDate, value: parseInt(value) })\n                                }\n                        })\n\n                });\n\n\n                let dayHours = [...Array(24).keys()]\n                let dayResult = []\n                let startSaved = 0\n\n                itemList.forEach(({ time, slot }, index) => {\n                        console.log('----HOUR----', time)\n                        let hour = parseInt(time.split(':')[0])\n                        let minute = parseInt(time.split(':')[1])\n                        //console.log('Hour:', hour);\n                        let filteredEmployees = dayArray.filter(({ startDate, endDate, value }) => {\n                                return (startDate.getHours() <= hour && endDate.getHours() >= hour + 1 && value !== -100 && Number.isInteger(value))\n                        })\n                        //this is the available employee in the 'hour' and SOMEHOW ITS SORTED THANKS JAVASCRIPT\n                        //console.log('First Filter:\\n', filteredEmployees)\n\n                        //filter the available employee with the highest value only\n                        let max = -1\n                        //console.log('FE', filteredEmployees);\n\n                        if (filteredEmployees.length === 0) {\n                                dayResult.push({ shiftTime: { hour, minute }, assigned: [] })\n                        }\n                        else {\n                                filteredEmployees.forEach(({ value }) => {\n                                        if (value > max) max = value\n                                })\n                                let highValueFilteredEmployees = filteredEmployees.filter(({ value }) => value === max)\n\n                                console.log('HVFE', highValueFilteredEmployees);\n                                if (highValueFilteredEmployees.length < slot) {\n                                        //if preferred available employees count is less than slot\n                                        let taken = []\n                                        let random\n\n                                        if (max >= 0) {\n                                                //console.log('HEREBRO MAX >=0');\n                                                filteredEmployees = filteredEmployees.filter(({ value }) => {\n                                                        return max === 1 ? value === 0 : value === -1\n                                                })\n                                                console.log('FE', filteredEmployees);\n                                        }\n\n                                        while (highValueFilteredEmployees.length < slot && filteredEmployees.length !== 0) {\n                                                //console.log('HEREBRO', highValueFilteredEmployees.length)\n                                                //console.log(slot)\n                                                //console.log(filteredEmployees.length)\n\n                                                random = Math.floor(Math.random() * filteredEmployees.length)\n\n                                                if (!taken.includes(random)) {\n                                                        //console.log('HEREBRO PUSHING');\n                                                        highValueFilteredEmployees.push(filteredEmployees[random])\n                                                        filteredEmployees.splice(random, 1)\n                                                        taken.push(random)\n                                                }\n\n                                        }\n                                        //console.log('FINISHBRO');\n\n\n\n                                }\n\n                                let dayResultObj = { shiftTime: { hour, minute }, assigned: [] }\n                                if (highValueFilteredEmployees === 0) {\n                                        dayResult.push('NOTHING HERE')\n                                }\n                                else if (highValueFilteredEmployees.length <= slot) {\n                                        //  startSaved >= DAILYMAX\n\n                                        highValueFilteredEmployees.forEach((item) => {\n                                                if (canWork(item.empID)) {\n                                                        dayResultObj.assigned.push(item)\n                                                }\n\n                                        })\n                                        dayResult.push(dayResultObj)\n                                }\n\n                                else if (highValueFilteredEmployees.length > slot) {\n\n                                        let prevEmployees = []\n                                        // if (dayResult[index - 1].assigned.empID === item.empID && startSaved < DAILYMAX && weeklyMax[item.empID] < WEEKLYMAX) {\n                                        //                                 ////console.log('MATCH BEFORE for this hour:', hour, 'pushing', item.emp);\n                                        //                                 dayResult.push({ shiftTime: { hour, minute }, assigned: highValueFilteredEmployees[idx] })\n                                        //                                 console.log('Goes here because of previous match')\n                                        //                                 console.log('Day:', indexArray, 'Chosen person for the hour ', hour, ' shift: \\n', dayResult[dayResult.length - 1])\n                                        //                                 isSet = true\n                                        //                                 startSaved++\n                                        //                                 weeklyMax[item.empID]++\n                                        //                         }\n\n                                        // console.log('INDEX', index)\n                                        // console.log(dayResult[index - 1])\n                                        if (index !== 0) {\n                                                dayResult[index - 1].assigned.forEach(({ empID }) => {\n                                                        prevEmployees.push(empID)\n                                                })\n                                        }\n\n                                        // console.log(prevEmployees)\n\n                                        highValueFilteredEmployees.forEach((item, highValIndex) => {\n\n\n                                                if (prevEmployees.includes(item.empID) && dayResultObj.assigned.length < slot && canWork(item.empID)) {\n                                                        dayResultObj.assigned.push(item)\n                                                        highValueFilteredEmployees.splice(highValIndex, 1)\n                                                }\n                                        })\n\n                                        highValueFilteredEmployees.forEach((item, highValIndex) => {\n                                                //push the best available time\n\n                                                if (dayResultObj.assigned.length < slot && canWork(item.empID)) {\n                                                        dayResultObj.assigned.push(item)\n                                                }\n\n                                        })\n\n                                        // console.log('INDEX1', index)\n                                        dayResult.push(dayResultObj)\n\n\n                                }\n\n                                console.log('DAY RESULT', dayResultObj)\n                                console.log('DAILYMAX', dailyMax)\n                        }\n\n\n\n                        //if only 1 available and that hours exceed 8 then error\n                        // if (highValueFilteredEmployees.length === 1 && startSaved >= DAILYMAX) console.log('Hours exceeded')\n\n                        // //if only 1 available and that hours has not exceeded 8 then set\n                        // else if (highValueFilteredEmployees.length === 1 && startSaved < DAILYMAX && weeklyMax[highValueFilteredEmployees[0].empID] < WEEKLYMAX) {\n                        //         dayResult.push({ shiftTime: { hour, minute }, assigned: highValueFilteredEmployees[0] })\n                        //         startSaved++\n                        //         console.log('Goes here because of 1')\n                        //         //console.log('Current hours:', startSaved)\n                        //         console.log('Day:', indexArray, 'Chosen person for the hour ', hour, ' shift: \\n', dayResult[dayResult.length - 1])\n                        //         if (weeklyMax[highValueFilteredEmployees[0].empID]) weeklyMax[highValueFilteredEmployees[0].empID]++\n                        //         else weeklyMax[highValueFilteredEmployees[0].empID] = 1\n                        // }\n\n                        // //if no employees are available then error\n                        // else if (highValueFilteredEmployees.length === 0) console.log('No one available at hour:', hour, 'due to no one available') //sundayResult.push('DO IT YOURSELF') \n                        // else {\n\n                        //         //isSet = repetitive employee to be assigned by default is false\n                        //         let isSet = false\n                        //         //if not the first time of the day\n                        //         if (dayResult.length !== 0) {\n                        //                 highValueFilteredEmployees.forEach((item, idx) => {\n                        //                         //if the prev hour was him/her then set it again\n                        //                         if (dayResult[index - 1].assigned.empID === item.empID && startSaved < DAILYMAX && weeklyMax[item.empID] < WEEKLYMAX) {\n                        //                                 ////console.log('MATCH BEFORE for this hour:', hour, 'pushing', item.emp);\n                        //                                 dayResult.push({ shiftTime: { hour, minute }, assigned: highValueFilteredEmployees[idx] })\n                        //                                 console.log('Goes here because of previous match')\n                        //                                 console.log('Day:', indexArray, 'Chosen person for the hour ', hour, ' shift: \\n', dayResult[dayResult.length - 1])\n                        //                                 isSet = true\n                        //                                 startSaved++\n                        //                                 weeklyMax[item.empID]++\n                        //                         }\n                        //                 })\n                        //         }\n                        //         //WIP\n                        //         if (!isSet) {\n                        //                 //if the previous employee cant work anymore then we set a new employee to work that\n                        //                 // has the most potential hours\n                        //                 startSaved = 0\n                        //                 let greatest = 0\n                        //                 let least = 12\n                        //                 let chosenEmp = null\n                        //                 highValueFilteredEmployees.forEach((item, idx) => {\n                        //                         if (!weeklyMax[item.empID]) weeklyMax[item.empID] = 0\n\n                        //                         console.log('Oh no no no')\n\n                        //                         if (item.endDate.getHours() > greatest && weeklyMax[item.empID] < least && weeklyMax[item.empID] < WEEKLYMAX) {\n                        //                                 greatest = item.endDate.getHours()\n                        //                                 least = weeklyMax[item.empID]\n                        //                                 chosenEmp = item\n                        //                                 console.log('1', chosenEmp)\n                        //                         }\n\n                        //                 })\n                        //                 // console.log(chosenEmp)\n                        //                 if (chosenEmp !== null) {\n                        //                         dayResult.push({ shiftTime: { hour, minute }, assigned: chosenEmp })\n                        //                         weeklyMax[chosenEmp.empID]++\n                        //                         console.log('Goes here because of random (David), but really most potential hours')\n                        //                         console.log('Day:', indexArray, 'Chosen person for the hour ', hour, ' shift: \\n', dayResult[dayResult.length - 1])\n                        //                 }\n                        //                 else {\n                        //                         console.log('2. No one is available at hour:', hour, 'due to hours exceeded')\n                        //                 }\n\n                        //         }\n\n                        // }\n\n\n\n                })\n\n                //console.log('Day:', indexArray, 'Big list \\n', dayResult);\n                //console.log(weeklyMax)\n                //simplify the sundayArray result\n                let dayFinalResult = []\n                let pass = false\n                let hoursSaved\n                let minutesSaved\n                let newObj\n\n                let certainDay = 29\n                let certainMonth = 2\n\n                if (indexArray <= 2) {\n                        certainDay = certainDay + indexArray\n                }\n                else {\n                        certainDay = 0 + indexArray - 2\n                        certainMonth = 3\n                }\n\n                let save = []\n\n                dayResult.forEach(({ assigned, shiftTime }, index) => {\n                        console.log('HOUR', shiftTime.hour, 'MINUTE', shiftTime.minute)\n                        assigned.forEach((employee) => {\n\n                                // if(index === 0)\n                                // {\n                                //         save.push({ title: employee.emp, start: new Date(2020, certainMonth, certainDay, shiftTime.hour, 0, 0)})\n                                // }\n                                // else if(dayResult[])\n\n                                let noLongerScheduled = false\n                                let iter = 1\n                                let theirStartHour = 0\n                                let theirStartMinute\n                                let theirEndHour\n                                let theirEndMinute\n                                let stillGoing = false\n\n\n                                //if they are not scheduled the prev hour\n                                if (index === 0) {\n                                        while (!noLongerScheduled) {\n\n                                                if (index + iter <= dayResult.length - 1 && dayResult[index + iter].assigned.includes(employee)) {\n                                                        console.log('Keep looking')\n                                                        if (iter === 1) {\n                                                                theirStartHour = shiftTime.hour\n                                                                theirStartMinute = shiftTime.minute\n                                                        }\n                                                        stillGoing = true\n                                                }\n                                                else {\n                                                        noLongerScheduled = true\n                                                        theirEndHour = shiftTime.hour + iter\n                                                        theirEndMinute = shiftTime.minute\n                                                }\n                                                iter++\n                                        }\n                                        //SET THE EVENT\n                                        if(stillGoing) {\n                                                newObj = { id: employee.empID, title: employee.emp, start: new Date(2020, certainMonth, certainDay, theirStartHour, theirStartMinute, 0), end: new Date(2020, certainMonth, certainDay, theirEndHour, 0, 0) }\n                                                console.log('Start Hour:', theirStartHour, 'Start Minute:', theirStartMinute)\n                                                console.log('New OBJ', newObj)\n                                        }\n                                        else {\n                                                newObj = { id: employee.empID, title: employee.emp, start: new Date(2020, certainMonth, certainDay, shiftTime.hour, shiftTime.minute, 0), end: new Date(2020, certainMonth, certainDay, theirEndHour, 0, 0) }\n                                                console.log('Start Hour:', shiftTime.hour, 'Start Minute:', shiftTime.minute)\n                                                console.log('New OBJ', newObj)\n                                        }\n\n                                        dayFinalResult.push(newObj)\n                                }\n                                else if (!dayResult[index - 1].assigned.includes(employee)) {\n                                        while (!noLongerScheduled) {\n\n                                                if (index + iter <= dayResult.length - 1 && dayResult[index + iter].assigned.includes(employee)) {\n                                                        console.log('Keep looking')\n                                                        if (iter === 1) {\n                                                                theirStartHour = shiftTime.hour\n                                                                theirStartMinute = shiftTime.minute\n                                                        }\n                                                        stillGoing = true\n                                                }\n                                                else {\n                                                        noLongerScheduled = true\n                                                        theirEndHour = shiftTime.hour + iter\n                                                        theirEndMinute = shiftTime.minute\n                                                }\n                                                iter++\n                                        }\n                                        \n                                        //SET THE EVENT\n                                        if(stillGoing) {\n                                                newObj = { id: employee.empID, title: employee.emp, start: new Date(2020, certainMonth, certainDay, theirStartHour, theirStartMinute, 0), end: new Date(2020, certainMonth, certainDay, theirEndHour, 0, 0) }\n                                                console.log('Start Hour:', theirStartHour, 'Start Minute:', theirStartMinute)\n                                                console.log('New OBJ', newObj)\n                                        }\n                                        else {\n                                                newObj = { id: employee.empID, title: employee.emp, start: new Date(2020, certainMonth, certainDay, shiftTime.hour, shiftTime.minute, 0), end: new Date(2020, certainMonth, certainDay, theirEndHour, 0, 0) }\n                                                console.log('Start Hour:', shiftTime.hour, 'Start Minute:', shiftTime.minute)\n                                                console.log('New OBJ', newObj)\n                                        }\n                                        \n                                        dayFinalResult.push(newObj)\n                                }\n\n\n\n\n                                //console.log(assigned)\n                                // newObj = { title: employee.emp, start: new Date(2020, certainMonth, certainDay, shiftTime.hour, 0, 0), end: new Date(2020, certainMonth, certainDay, shiftTime.hour + 1, 0, 0) }\n                                // dayFinalResult.push(newObj)\n\n                                //         if (index === dayResult.length - 1) {\n                                //                 if (!pass) {\n                                //                         newObj = { title: employee.emp, start: new Date(2020, certainMonth, certainDay, shiftTime.hour, shiftTime.minute, 0), end: new Date(2020, certainMonth, certainDay, shiftTime.hour + 1, 0, 0), color: 'red' }\n                                //                         dayFinalResult.push(newObj)\n                                //                 }\n                                //                 else {\n                                //                         newObj = { title: employee.emp, start: new Date(2020, certainMonth, certainDay, hoursSaved, minutesSaved, 0), end: new Date(2020, certainMonth, certainDay, shiftTime.hour + 1, 0, 0), color: 'green' }\n                                //                         dayFinalResult.push(newObj)\n                                //                         pass = false\n                                //                 }\n                                //         }\n\n                                //         else if (dayResult[index + 1].assigned.includes(employee)) {\n\n                                //                 //make it one block\n                                //                 hoursSaved = shiftTime.hour\n                                //                 minutesSaved = shiftTime.minute\n                                //                 pass = true\n                                //                 console.log('Made it to the pass change!!!!!!!!!!!!')\n                                //         }\n\n                                //         //Stops block\n                                //         else if (!dayResult[index + 1].assigned.includes(employee)) {\n\n                                //                 if (!pass) {\n                                //                         newObj = { title: employee.emp, start: new Date(2020, certainMonth, certainDay, shiftTime.hour, shiftTime.minute, 0), end: new Date(2020, certainMonth, certainDay, shiftTime.hour + 1, 0, 0), color: 'yellow' }\n                                //                         dayFinalResult.push(newObj)\n                                //                 }\n                                //                 else {\n                                //                         newObj = { title: employee.emp, start: new Date(2020, certainMonth, certainDay, hoursSaved, minutesSaved, 0), end: new Date(2020, certainMonth, certainDay, shiftTime.hour + 1, 0, 0), color: 'purple' }\n                                //                         dayFinalResult.push(newObj)\n                                //                         pass = false\n                                //                 }\n\n                                //         }\n\n                                //         // //Used to save block start times\n                                //         // else if ((index !== 0 && dayResult[index - 1].assigned.includes(employee.empID)) || (index === 0 && dayResult[index + 1].assigned.includes(employee.empID))) {\n\n                                //         //         //make it one block\n                                //         //         hoursSaved = shiftTime.hour\n                                //         //         minutesSaved = shiftTime.minute\n                                //         //         pass = true\n                                //         // }\n                        })\n\n                        // if (index === dayResult.length - 1) {\n                        //         // newObj = { title: item.assigned.emp, start: new Date(2020, certainMonth, certainDay, hoursSaved, 0, 0), end: new Date(2020, certainMonth, certainDay, item.shiftTime + 1, 0, 0) }\n                        //         // dayFinalResult.push(newObj)\n                        //         if (!pass) {\n                        //                 newObj = { title: item.assigned.emp, start: new Date(2020, certainMonth, certainDay, item.shiftTime.hour, item.shiftTime.minute, 0), end: new Date(2020, certainMonth, certainDay, item.shiftTime.hour + 1, 0, 0) }\n                        //                 dayFinalResult.push(newObj)\n                        //         }\n                        //         else {\n                        //                 newObj = { title: item.assigned.emp, start: new Date(2020, certainMonth, certainDay, hoursSaved, minutesSaved, 0), end: new Date(2020, certainMonth, certainDay, item.shiftTime.hour + 1, 0, 0) }\n                        //                 dayFinalResult.push(newObj)\n                        //                 pass = false\n                        //         }\n                        // }\n                        // else if (item.assigned.empID !== dayResult[index + 1].assigned.empID) {\n\n                        //         if (!pass) {\n                        //                 newObj = { title: item.assigned.emp, start: new Date(2020, certainMonth, certainDay, item.shiftTime.hour, item.shiftTime.minute, 0), end: new Date(2020, certainMonth, certainDay, item.shiftTime.hour + 1, 0, 0) }\n                        //                 dayFinalResult.push(newObj)\n                        //         }\n                        //         else {\n                        //                 newObj = { title: item.assigned.emp, start: new Date(2020, certainMonth, certainDay, hoursSaved, minutesSaved, 0), end: new Date(2020, certainMonth, certainDay, item.shiftTime.hour + 1, 0, 0) }\n                        //                 dayFinalResult.push(newObj)\n                        //                 pass = false\n                        //         }\n\n                        // }\n                        // else if ((index !== 0 && item.assigned.empID !== dayResult[index - 1].assigned.empID) || (index === 0 && item.assigned.empID === dayResult[index + 1].assigned.empID)) {\n\n                        //         //make it one block\n                        //         hoursSaved = item.shiftTime.hour\n                        //         minutesSaved = item.shiftTime.minute\n                        //         pass = true\n                        // }\n                })\n                //console.log('Day:', indexArray, 'Condensed list \\n', dayFinalResult)\n                //console.log('If you have ANY questions, ask David. Probably his fault. ;) HAHAHAHAHAHAHA')\n\n\n                return dayFinalResult\n        }\n\n        const autoPopulate = () => {\n\n\n                // let days = [...Array(7).keys()]\n                let weekResult = []\n\n                // days.forEach((indexArray) => {\n                //         weekResult = weekResult.concat(day(indexArray))\n                // })\n\n                SCHEDULE.forEach((item, index) => {\n                        weekResult = weekResult.concat(day(item, index))\n                })\n                console.log('WEEKLY ', weeklyMax)\n                console.log('WEEKLY ASSIGNED', weekResult)\n                return weekResult\n        }\n\n        const { loading, error, data, refetch, networkStatus } = useQuery(GetAllUsers)\n\n        return <PrimaryButton onClick={() => props.todo(autoPopulate())}>Auto Populate</PrimaryButton>\n}","import { gql } from 'apollo-boost'\nimport { UserData } from '../UserDataConstant'\n\nexport const UpdateUser = gql`\n    mutation updateUser(\n        $id: String!\n        $first: String\n        $last: String\n        $email: String\n        $preferences: [UpdateEventInput!]\n        $shifts: [UpdateEventInput!]\n    ) {\n        updateUser(\n            _id: $id\n            firstName: $first\n            lastName: $last\n            email: $email\n            preferences: $preferences\n            shifts: $shifts\n        ) { ${UserData} }\n            \n    }\n`\n\nexport const CreateUser = gql`\n    mutation createUser(\n        $firebaseID: String!\n        $first: String!\n        $last: String!\n        $userType: String!\n        $email: String!\n\n    ) {\n        createUser(\n            firebaseID: $firebaseID\n            firstName: $first\n            lastName: $last\n            userType: $userType\n            email: $email\n        ) { ${UserData} }\n            \n    }\n`\n\nexport const DeleteUser = gql`\n    mutation deleteUser($email: String!) {\n        deleteUser(email: $email)\n    }\n`\n\nexport const ClockIn = gql`\n    mutation clockIn($location: String!, $time: String!, $userID: String!) {\n        clockIn(location: $location, time: $time, userID: $userID)\n    }\n`\n\nexport const ClockOut = gql`\n    mutation clockOut($location: String!, $time: String!, $userID: String!) {\n        clockOut(location: $location, time: $time, userID: $userID)\n    }\n`\n","import { gql } from 'apollo-boost'\r\nimport { UserData } from '../UserDataConstant'\r\n\r\nexport const CreateBlackout = gql`\r\n    mutation createBlackout(\r\n        $start: String!,\r\n        $end: String!\r\n    ) {\r\n        createBlackout(\r\n            start: $start,\r\n            end: $end\r\n        ){_id}\r\n    }\r\n`","import React, { useState, useEffect } from 'react'\nimport { Calendar, momentLocalizer, Views } from 'react-big-calendar'\nimport {\n    Card,\n    Hyperlink,\n    PrimaryButton,\n    SubtitleText,\n    TextInput,\n    TitleText,\n} from './../Styles/StyledComponents'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport moment from 'moment'\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport '../Styles/Schedule.css'\nimport { Swatch, Color } from '../Styles/StyledComponents'\nimport { HuePicker } from 'react-color'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css'\nimport { UpdateUsersShifts } from '../API/Mutations/Shifts'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { GetUserByID, GetAllUsersId } from './../API/Queries/User'\nimport AutoPopulate from './../Functions/AutoPopulation'\nimport { UpdateUser } from './../API/Mutations/User'\nimport {CreateBlackout} from './../API/Mutations/Blackout'\nimport {GetBlackouts} from './../API/Queries/Blackout'\n\nmoment.locale('en')\nconst localizer = momentLocalizer(moment)\nconst DraggableCalendar = withDragAndDrop(Calendar)\n\nexport default function Schedule(props) {\n    const [myEventsList, setMyEventsList] = useState([])\n    const [colorPicked, setColorPicked] = useState('red')\n    const [displayColorPicker, setDisplayColorPicker] = useState(false)\n    const [blackoutStart, setBlackoutStart] = useState('')\n    const [blackoutEnd, setBlackoutEnd] = useState('')\n    const [AutoPopulationSchedule, setAutoPopulationSchedule] = useState([])\n    const [blackoutDates, setBlackoutDates] = useState([])\n\n    const [addBlackout] = useMutation(CreateBlackout)\n    const userID = localStorage.getItem('currentUserID')\n    const [updateShifts] = useMutation(UpdateUsersShifts)\n\n    const { loading, error, data: userData, refetch, networkStatus } = useQuery(\n        GetUserByID,\n        {\n            variables: { id: userID },\n            notifyOnNetworkStatusChange: true,\n        }\n    )\n\n    const {\n        loading: loading2,\n        error: error2,\n        data: multipleUserData,\n        refetch: refetch2,\n        networkStatus: netStat2,\n    } = useQuery(GetAllUsersId)\n\n    const {\n        loading: loading3,\n        error: error3,\n        data: data3,\n        refetch: refetch3,\n        networkStatus: netStat3,\n    } = useQuery(GetBlackouts)\n\n    //useEffect => what to do after the component is rendered\n    useEffect(() => {\n        //calling setMyEventsList to set hardcoded list\n        setMyEventsList([\n            {\n                title: 'Employee 1',\n                start: new Date(2020, 1, 23, 5),\n                end: new Date(2020, 1, 23, 18),\n                color: '#fc0373',\n            },\n            {\n                title: 'Employee 3',\n                start: new Date(2020, 1, 25, 10),\n                end: new Date(2020, 1, 25, 16),\n                color: '#18fc03',\n            },\n        ])\n\n        const onCompleted = data3 => {\n\t\t\tlet temp = []\n\t\t\t//console.log('GOT HERE')\n\t\t\tdata3.getBlackouts.forEach(({start, end}) => {\n                let startDate = new Date(start)\n                let endDate = new Date(end)\n                //console.log(startDate, '\\n', endDate)\n                temp.push({start: startDate, end: endDate})\n                //console.log(temp)\n            })\n            //console.log(temp)\n            setBlackoutDates(temp)\n\t\t\t//console.log(blackoutDates)\n\t\t}\n\n        if (!loading3 && !error3) onCompleted(data3)\n\n    }, [loading3, data3, error3])\n\n    const handleSelect = ({ start, end }) => {\n        const title = window.prompt('New Event name')\n        if (title)\n            setMyEventsList([\n                ...myEventsList,\n                { title, start, end, color: colorPicked && colorPicked.hex },\n            ])\n    }\n\n    const handleColorChangeComplete = (color, event) =>\n        setColorPicked(color, () => setDisplayColorPicker(!displayColorPicker))\n\n    const Event = ({ event }) => {\n        return <p style={{ color: 'yellow' }}>{event.title}</p>\n    }\n\n    const moveEvent = ({ event, start, end }) => {\n        let { title, color } = event\n        let tempArr = myEventsList.filter((item) => item !== event)\n        tempArr.push({ title, start, end, color })\n        setMyEventsList(tempArr)\n    }\n\n    const resizeEvent = ({ event, start, end }) => {\n        let index = myEventsList.indexOf(event)\n        let { title, color } = event\n        let tempArr = [...myEventsList]\n        tempArr[index] = { title, color, start, end }\n        setMyEventsList(tempArr)\n    }\n\n    const handleDelete = (event) => {\n        const check = window.confirm(\n            '\\nDelete this event: Ok - YES, Cancel - NO'\n        )\n        if (check) {\n            let deleteSpot = myEventsList.indexOf(event)\n            let tempArray = [...myEventsList]\n            tempArray.splice(deleteSpot, 1)\n            setMyEventsList(tempArray)\n        }\n    }\n\n    //Handles the coloring of blackout days\n    const handleBlackoutDate = (date) => {\n        ///console.log(blackoutDates)\n        for(let i in blackoutDates)\n        {\n            //console.log(blackoutDates[i].start.toISOString(), '\\n', blackoutDates[i].end.toISOString())\n            let blackoutStartDate = blackoutDates[i].start\n            let blackoutStartDate2 = blackoutDates[i].end\n\n            Date.prototype.addDays = function (days) {\n                var date = new Date(this.valueOf())\n                date.setDate(date.getDate() + days)\n                return date\n            }\n\n            function getDates(startDate, stopDate) {\n                var dateArray = new Array()\n                var currentDate = startDate\n                while (currentDate <= stopDate) {\n                    dateArray.push(new Date(currentDate))\n                    currentDate = currentDate.addDays(1)\n                }\n                return dateArray\n            }\n\n            let arr = getDates(blackoutStartDate, blackoutStartDate2)\n\n            for (let x in arr) {\n                if (\n                    date.getDate() === arr[x].getDate() &&\n                    date.getMonth() === arr[x].getMonth() &&\n                    date.getFullYear() === arr[x].getFullYear()\n                ) {\n                    return {\n                        style: {\n                            backgroundColor: '#000',\n                        },\n                    }\n                }\n            }\n        }\n    }\n\n    const renderBlackout = () => {\n        const renderDatePicker = (statename, functionName) => {\n            return (\n                <DatePicker\n                    selected={statename}\n                    onSelect={(date) => functionName(date)} //when day is clicked\n                    minDate={statename === blackoutEnd && blackoutStart}\n                    maxDate={statename === blackoutStart && blackoutEnd}\n                    //   onChange={this.handleChange} //only when value has changed\n                />\n            )\n        }\n        return (\n            <div\n                style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                }}\n            >\n                <div style={{ display: 'flex' }}>\n                    <h3>Start</h3>\n                    {renderDatePicker(blackoutStart, setBlackoutStart)}\n                \n                <h3>End</h3>\n                    {renderDatePicker(blackoutEnd, setBlackoutEnd)}\n                </div>\n            </div>\n        )\n    }\n\n    //const { loading, error, data:userIds, refetch, networkStatus } = useQuery(getAllUsersId)\n\n    if (loading) return <p>Loading...</p>\n    if (error) return <p>Error :( {JSON.stringify(error)}</p>\n    if (networkStatus === 4) return <p>Refetching...</p>\n\n    const sendAutoPopulatedShiftsToDB = () => {\n        const formattedForDB = {}\n        AutoPopulationSchedule.forEach((shift) => {\n            const { id, ...rest } = shift\n            let nextWeek\n            const allShifts = []\n            let currentWeek = 0\n            const numberOfWeeks = 20\n            while (currentWeek < numberOfWeeks) {\n                nextWeek = { ...rest }\n                nextWeek.start = new Date(shift.start)\n                nextWeek.end = new Date(shift.end)\n                nextWeek.start.setDate(\n                    nextWeek.start.getDate() + currentWeek * 7\n                )\n                nextWeek.end.setDate(nextWeek.end.getDate() + currentWeek * 7)\n                nextWeek.start = nextWeek.start.toISOString()\n                nextWeek.end = nextWeek.end.toISOString()\n                nextWeek.color = 'blue'\n                allShifts.push(nextWeek)\n                currentWeek++\n            }\n            if (id in formattedForDB) {\n                formattedForDB[id].shifts = formattedForDB[id].shifts.concat(\n                    allShifts\n                )\n            } else {\n                formattedForDB[id] = {}\n                formattedForDB[id]._id = id\n                formattedForDB[id].shifts = [...allShifts]\n            }\n        })\n        console.log(formattedForDB[`5e85411d6872e7001ec57743`])\n        const myVar = Object.values(formattedForDB)\n        //console.log(myVar)\n        updateShifts({ variables: { users: myVar } })\n    }\n\n    // const sendAutoPopulatedShiftsToDB = () => {\n    //     const formattedForDB = {}\n    //     AutoPopulationSchedule.forEach((shift, index) => {\n    //         if(shift.id === \"5e85411d6872e7001ec57743\")\n    //         {\n    //             console.log('STRING SHIFT', shift)\n    //         }\n    //         let nextWeek\n    //         let weeks = []\n    //         let i = 1\n    //         while (i < 3)\n    //         {\n    //             nextWeek = {...shift}\n    //             // let sStart = shift.start\n    //             // let sEnd = shift.end\n    //             nextWeek.start = new Date(shift.start)\n    //             nextWeek.start.setDate(nextWeek.start.getDate()+i*7)\n    //             nextWeek.end = new Date(shift.end)\n    //             nextWeek.end.setDate(nextWeek.end.getDate()+i*7)\n    //             // nextWeek.start.setDate(sStart.getDate()+(7))\n    //             // nextWeek.end.setDate(sEnd.getDate()+(7))\n    //             // if(nextWeek.id === \"5e85411d6872e7001ec57743\")\n    //             // {\n    //             //     console.log('Next Week', nextWeek)\n    //             // }\n    //             nextWeek.start = nextWeek.start.toISOString()\n    //             nextWeek.end = nextWeek.end.toISOString()\n    //             // if(nextWeek.id === \"5e85411d6872e7001ec57743\")\n    //             // {\n    //             //     console.log('Next Week2', nextWeek)\n    //             // }\n    //             nextWeek.color = 'blue'\n    //             delete nextWeek.id\n    //             weeks.push(nextWeek)\n    //             //console.log(weeks)\n    //             i++\n    //         }\n    //         //console.log('This is the added shifts going to the database', weeks)\n    //         const { id, ...rest } = shift\n    //         const myPushObj = {\n    //             ...rest,\n    //             start: rest.start.toISOString(),\n    //             end: rest.end.toISOString(),\n\n    //             // Change these two later\n    //             //_id: id,\n    //             color: 'blue',\n    //         }\n    //         // let test = []\n    //         // test.push([myPushObj,...weeks])\n    //         // console.log(myPushObj)\n    //         // console.log('testtesttest', test)\n    //         if (id in formattedForDB){ \n    //             // console.log('pushobj', myPushObj)\n    //             // console.log('weeks', weeks)\n    //             if(id === \"5e85411d6872e7001ec57743\") console.log('some string so we can see',[myPushObj,...weeks])\n    //             formattedForDB[id].shifts.concat([myPushObj,...weeks])\n    //         }\n    //         else {\n    //             if(id === \"5e85411d6872e7001ec57743\") console.log('got in the else', [myPushObj,...weeks])\n    //             formattedForDB[id] = {}\n    //             formattedForDB[id]._id = id\n    //             formattedForDB[id].shifts = [myPushObj,...weeks]\n    //         }\n    //     })\n    //     console.log(formattedForDB[`5e85411d6872e7001ec57743`])\n    //     const myVar = Object.values(formattedForDB)\n    //     //console.log(myVar)\n    //     updateShifts({ variables: { users: myVar } })\n    // }\n\n    const sendBlackOutToDB = () => {\n        console.log(blackoutStart, blackoutEnd)\n        console.log(blackoutStart.toISOString(), blackoutEnd.toISOString())\n        addBlackout({ variables: { start: blackoutStart.toISOString(), end: blackoutEnd.toISOString() } })\n    }\n\n    // AutoPopulationSchedule.sort(function (a, b) { return new Date(a.start) - new Date(b.start); })\n    // console.log('Sorted AutoPop', AutoPopulationSchedule)\n\n    //FOR EMPLOYEE\n    // const handleDropShift = event => {\n    //     const check = window.confirm(\n    //         '\\nDrop this shift: Ok - YES, Cancel - NO'\n    //     )\n    //     if (check) {\n    //         let badDropAttempted = false\n    //         if (\n    //             event.start.getDate() >= blackoutStart.getDate() &&\n    //             event.start.getDate() <= blackoutEnd.getDate() &&\n    //             event.start.getMonth() == blackoutStart.getMonth() &&\n    //                 event.start.getMonth() == blackoutEnd.getMonth() &&\n    //             event.start.getFullYear() == blackoutStart.getFullYear() &&\n    //                 event.start.getFullYear() == blackoutEnd.getFullYear()\n    //         ) {\n    //             badDropAttempted = true\n    //         }\n\n    //         if (!badDropAttempted) {\n    //             let deleteSpot = myPreferencesList.indexOf(event)\n    //             let tempArray = [...myPreferencesList]\n    //             tempArray.splice(deleteSpot, 1)\n    //             setMyPreferencesList(tempArray)\n    //         }\n    //         //Other shift drop stuff\n    //     }\n    // }\n\n    // const reformatAutoPop = (arr) => {\n    //     let newArr = []\n    //     arr.forEach(({ assigned, shiftTime }) => {\n    //         let newObj = { title: assigned.emp, start: new Date(2020, 2, 29, shiftTime, 0, 0), end: new Date(2020, 2, 29, shiftTime + 1, 0, 0) }\n    //         newArr.push(newObj)\n    //     })\n    //     setAutoPopulationSchedule(newArr)\n    // }\n\n    return (\n        <Card\n            style={{\n                width: '1500px',\n            }}\n        >\n            <div>\n            <TitleText style={{\n                    textAlign: 'left',\n                    position: 'flex',\n                    fontSize: '48px',\n                    //clear:'left'\n                }}>Schedule</TitleText>\n                <h3 style={{ color: colorPicked }}>\n                    This is some schedule content\n                </h3>\n                <h3>First Name: {userData.getUserByID.firstName}</h3>\n                <Swatch\n                    onClick={() => setDisplayColorPicker(!displayColorPicker)}\n                >\n                    <Color color={colorPicked.hex} />\n                    {displayColorPicker && (\n                        <HuePicker\n                            color={colorPicked}\n                            onChange={handleColorChangeComplete}\n                        />\n                    )}\n                </Swatch>\n                {renderBlackout()}\n\n                <div>\n                    <PrimaryButton\n                        style={{\n                            //clear:'left',\n                            align: 'left',\n                        }}\n                        onClick={(e) => sendBlackOutToDB()}\n                    >\n                        Submit Blackouts To Database\n                    </PrimaryButton>\n\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                        }}\n                    ></div>\n                </div>\n\n\n                <DraggableCalendar\n                    selectable\n                    localizer={localizer}\n                    events={myEventsList}\n                    views={['month', 'week']}\n                    defaultView={Views.WEEK}\n                    defaultDate={new Date(2020, 1, 25)}\n                    onSelectEvent={handleDelete}\n                    onSelectSlot={handleSelect}\n                    style={{ height: '80vh', width: '1450px' }}\n                    dayPropGetter={handleBlackoutDate}\n                    eventPropGetter={(event) => ({\n                        style: {\n                            backgroundColor: event.color,\n                            alignSelf: 'center',\n                            alignContent: 'center',\n                        },\n                    })}\n                    slotPropGetter={() => ({\n                        style: {\n                            // backgroundColor: 'red',\n                            // borderColor: 'red'\n                            border: 'none',\n                            // display: 'flex',\n                            alignItems: 'center',\n                        },\n                    })}\n                    // titleAccessor={function(e) {\n                    // \tconsole.log(e);\n                    // \treturn e.title;\n                    // }}\n                    components={{\n                        event: Event,\n                    }}\n                    draggableAccessor={(event) => true}\n                    onEventDrop={moveEvent}\n                    onEventResize={resizeEvent}\n                />\n\n                {/* <AutoPopulate todo={(fromChild) => reformatAutoPop(fromChild)} /> */}\n                <AutoPopulate\n                    todo={(fromChild) => setAutoPopulationSchedule(fromChild)}\n                />\n\n                <div>\n                    <PrimaryButton\n                        style={{\n                            //clear:'left',\n                            align: 'left',\n                        }}\n                        onClick={(e) => sendAutoPopulatedShiftsToDB()}\n                    >\n                        Submit Shifts To Database\n                    </PrimaryButton>\n\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                        }}\n                    ></div>\n                </div>\n\n                <DraggableCalendar\n                    selectable\n                    localizer={localizer}\n                    events={AutoPopulationSchedule}\n                    views={['month', 'week']}\n                    defaultView={Views.WEEK}\n                    defaultDate={new Date(2020, 2, 29)}\n                    onSelectEvent={handleDelete}\n                    onSelectSlot={handleSelect}\n                    style={{ height: '80vh', width: '1450px' }}\n                    dayPropGetter={handleBlackoutDate}\n                    eventPropGetter={(event) => ({\n                        style: {\n                            backgroundColor: event.color,\n                            alignSelf: 'center',\n                            alignContent: 'center',\n                        },\n                    })}\n                    slotPropGetter={() => ({\n                        style: {\n                            // backgroundColor: 'red',\n                            // borderColor: 'red'\n                            border: 'none',\n                            // display: 'flex',\n                            alignItems: 'center',\n                        },\n                    })}\n                    // titleAccessor={function(e) {\n                    // \tconsole.log(e);\n                    // \treturn e.title;\n                    // }}\n                    components={{\n                        event: Event,\n                    }}\n                    draggableAccessor={(event) => true}\n                    onEventDrop={moveEvent}\n                    onEventResize={resizeEvent}\n                />\n            </div>\n        </Card>\n    )\n}","import React, { useState } from 'react'\nexport const AuthContext = React.createContext()\nexport const AuthProvider = ({ children }) => {\n    const [user, setCurrentUser] = useState(null)\n    return (\n        <AuthContext.Provider\n            value={{\n                user,\n                setUser: (user) => setCurrentUser(user),\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    )\n}\n","import { useMutation, useQuery } from '@apollo/react-hooks'\nimport moment from 'moment'\nimport React, { useEffect, useState, useContext } from 'react'\nimport { Calendar, momentLocalizer, Views } from 'react-big-calendar'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css'\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\nimport { UpdateUser } from '../API/Mutations/User'\nimport '../Styles/Login.css'\nimport '../Styles/Schedule.css'\nimport { AuthContext } from './../Components/Auth'\nimport {\n    Card,\n    PrimaryButton,\n    SubtitleText,\n    TextInput,\n    TitleText,\n} from './../Styles/StyledComponents'\nmoment.locale('en')\nconst localizer = momentLocalizer(moment)\nconst options = [\n    { value: -100, label: 'In-Class', color: 'darkred' },\n    { value: -1, label: 'Unpreferred', color: 'red' },\n    { value: 0, label: 'Neutral', color: 'grey' },\n    { value: 1, label: 'Preferred', color: 'green' },\n]\n\nconst DraggableCalendar = withDragAndDrop(Calendar)\nconst DAYS = [\n    {\n        value: 0,\n        label: 'Sunday',\n    },\n    {\n        value: 1,\n        label: 'Monday',\n    },\n    {\n        value: 2,\n        label: 'Tuesday',\n    },\n    {\n        value: 3,\n        label: 'Wednesday',\n    },\n    {\n        value: 4,\n        label: 'Thursday',\n    },\n    {\n        value: 5,\n        label: 'Friday',\n    },\n    {\n        value: 6,\n        label: 'Saturday',\n    },\n]\nlet totalPreferredTime\n\nexport default function Account(props) {\n    const { user, setUser } = useContext(AuthContext)\n    const [userInfo, setUserInfo] = useState(user)\n    const [myPreferencesList, setMyPreferencesList] = useState([])\n    const [dropdownValue, setDropdownValue] = useState(options[1])\n    const [copyFrom, setCopyFrom] = useState('Select')\n    const [copyTo, setCopyTo] = useState('Select')\n\n    const [update, { data, loading }] = useMutation(UpdateUser)\n\n    const reFormatPreferenceList = (prefArray) => {\n        let temp = []\n        prefArray.forEach(({ title, start, end, color, value }) => {\n            let startDate = new Date(start)\n            let endDate = new Date(end)\n            temp.push({ title, start: startDate, end: endDate, color, value })\n        })\n        temp.sort(function (a, b) {\n            return new Date(a.start) - new Date(b.start)\n        })\n        setMyPreferencesList(temp)\n    }\n\n    useEffect(() => {\n        reFormatPreferenceList(user.preferences)\n    }, [user])\n\n    useEffect(() => {\n        if (!loading && data && data.updateUser) {\n            debugger\n            setUser(data.updateUser)\n        }\n    }, [data, loading, setUser])\n\n    const renderPreferenceSchedule = () => {\n        let formats = {\n            dayFormat: (date, culture, localizer) =>\n                localizer.format(date, 'dddd', culture),\n        }\n        const handleSelectPreference = ({ start, end }) => {\n            let color = 'green'\n\n            if (dropdownValue.value == -1) color = 'red'\n            else if (dropdownValue.value == 0) color = 'grey'\n            else if (dropdownValue.value == -100) color = 'darkred'\n\n            setMyPreferencesList([\n                ...myPreferencesList,\n                {\n                    title: dropdownValue.label,\n                    start,\n                    end,\n                    color,\n                    value: dropdownValue.value.toString(),\n                },\n            ])\n        }\n\n        //Includes copying events to different locations\n        const movePreference = ({ event, start, end }) => {\n            let { title, color, value } = event\n\n            const check = window.confirm(\n                '\\nCopy this event to new day?: Ok - YES, Cancel - NO'\n            )\n            if (check) {\n                setMyPreferencesList([\n                    ...myPreferencesList,\n                    { title, start, end, color, value },\n                ])\n            } else {\n                let tempArr = myPreferencesList.filter((item) => item !== event)\n                tempArr.push({ title, start, end, color, value })\n                setMyPreferencesList(tempArr)\n            }\n        }\n\n        const resizePreference = ({ event, start, end }) => {\n            let index = myPreferencesList.indexOf(event)\n            let { title, color, value } = event\n            let tempArr = [...myPreferencesList]\n            tempArr[index] = { title, color, start, end, value }\n            setMyPreferencesList(tempArr)\n        }\n\n        const handleDeletePreference = (event) => {\n            const check = window.confirm(\n                '\\nDelete this event: Ok - YES, Cancel - NO'\n            )\n            if (check) {\n                let deleteSpot = myPreferencesList.indexOf(event)\n                let tempArray = [...myPreferencesList]\n                tempArray.splice(deleteSpot, 1)\n                setMyPreferencesList(tempArray)\n            }\n        }\n\n        const renderCopyPreference = () => {\n            const handlePreferenceCopy = () => {\n                let temp = [...myPreferencesList]\n                let startingDate\n                let endingDate\n                //3,4,5,6\n                if (copyTo.value > 2) {\n                    startingDate = `April ${copyTo.value - 2}`\n                    endingDate = `April ${copyTo.value - 2}`\n                } else {\n                    startingDate = `March ${29 + copyTo.value}`\n                    endingDate = `March ${29 + copyTo.value}`\n                }\n\n                if (\n                    copyFrom !== 'Select' ||\n                    copyTo !== 'Select' ||\n                    copyTo.value !== copyFrom.value\n                ) {\n                    myPreferencesList.forEach(\n                        ({ start, title, end, color, value }) => {\n                            if (start.getDay() === copyFrom.value) {\n                                let newStart = new Date(\n                                    `${startingDate}, 2020 ${start.getHours()}:${start.getMinutes()}:${start.getSeconds()}`\n                                )\n                                let newEnd = new Date(\n                                    `${endingDate}, 2020 ${end.getHours()}:${end.getMinutes()}:${end.getSeconds()}`\n                                )\n                                temp.push({\n                                    title: title,\n                                    start: newStart,\n                                    end: newEnd,\n                                    color: color,\n                                    value: value,\n                                })\n                            }\n                        }\n                    )\n                }\n                setMyPreferencesList(temp)\n            }\n            return (\n                <div>\n                    <TitleText\n                        style={{\n                            fontSize: '3rem',\n                            textAlign: 'left',\n                        }}\n                    >\n                        Preferences\n                    </TitleText>\n                    <PrimaryButton\n                        style={{\n                            align: 'left',\n                        }}\n                        onClick={() => console.log(myPreferencesList)}\n                    >\n                        Log State\n                    </PrimaryButton>\n                    <PrimaryButton\n                        style={{\n                            align: 'left',\n                        }}\n                        onClick={() => handlePreferenceCopy()}\n                    >\n                        Copy\n                    </PrimaryButton>\n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-evenly',\n                        }}\n                    >\n                        <Dropdown\n                            options={options}\n                            onChange={(x) => setDropdownValue(x)}\n                            value={dropdownValue}\n                            placeholder='Select an option'\n                        />\n                        <div style={{ display: 'flex', alignItems: 'center' }}>\n                            <SubtitleText>From</SubtitleText>\n                            <Dropdown\n                                options={DAYS}\n                                onChange={(x) => setCopyFrom(x)}\n                                value={copyFrom}\n                                placeholder='Select an option'\n                            />\n                        </div>\n                        <div style={{ display: 'flex', alignItems: 'center' }}>\n                            <SubtitleText>To</SubtitleText>\n                            <Dropdown\n                                options={DAYS}\n                                onChange={(x) => setCopyTo(x)}\n                                value={copyTo}\n                                placeholder='Select an option'\n                            />\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n        const getTotalPreferredHours = () => {\n            totalPreferredTime = 0\n            myPreferencesList.forEach(({ value, start, end }) => {\n                if (value === '1') {\n                    let startDate = new Date(start)\n                    let endDate = new Date(end)\n                    let timeDifference =\n                        endDate.getHours() +\n                        endDate.getMinutes() / 60 -\n                        (startDate.getHours() + startDate.getMinutes() / 60)\n                    totalPreferredTime += timeDifference\n                }\n            })\n            return totalPreferredTime\n        }\n        return (\n            <div>\n                {renderCopyPreference()}\n                <PrimaryButton\n                    style={{\n                        //clear:'left',\n                        align: 'left',\n                    }}\n                    onClick={(e) =>\n                        totalPreferredTime >= 30 &&\n                        update({\n                            variables: {\n                                id: user._id,\n                                preferences: myPreferencesList.sort(function (\n                                    a,\n                                    b\n                                ) {\n                                    return new Date(a.start) - new Date(b.start)\n                                }),\n                            },\n                        })\n                    }\n                >\n                    Submit To Database\n                </PrimaryButton>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                ></div>\n\n                <DraggableCalendar //Preferences calendar\n                    selectable\n                    localizer={localizer}\n                    toolbar={false}\n                    formats={formats}\n                    events={myPreferencesList}\n                    view={Views.WEEK}\n                    defaultDate={new Date(2020, 2, 29)}\n                    onSelectEvent={handleDeletePreference}\n                    onSelectSlot={handleSelectPreference}\n                    style={{ align: 'center', width: '100%' }}\n                    eventPropGetter={(event) => ({\n                        style: {\n                            backgroundColor: event.color,\n                            alignSelf: 'center',\n                            alignContent: 'center',\n                        },\n                    })}\n                    slotPropGetter={() => ({\n                        //left pane, time\n                        style: {\n                            border: 'none',\n                            alignItems: 'center',\n                        },\n                    })}\n                    dayPropGetter={() => ({\n                        style: {\n                            alignItems: 'flex-start',\n                        },\n                    })}\n                    draggableAccessor={(event) => true}\n                    onEventDrop={movePreference}\n                    onEventResize={resizePreference}\n                />\n            </div>\n        )\n    }\n    const renderRow = (state, placeholder) => {\n        const onChange = (value) => {\n            let temp = { ...userInfo }\n            temp[state] = value\n            setUserInfo(temp)\n        }\n        return (\n            <TextInput\n                placeholder={placeholder}\n                type='text'\n                value={userInfo[state]}\n                borderColor={userInfo[state] === '' && 'red'}\n                onChange={(e) => onChange(e.target.value)}\n            />\n        )\n    }\n    const validation = ({ email, firstName, lastName }) => {\n        if (email === '' || firstName === '' || lastName === '')\n            console.log('asad')\n        else {\n            update({\n                variables: {\n                    id: user._id,\n                    first: firstName,\n                    last: lastName,\n                    email: email,\n                },\n            })\n        }\n    }\n    return (\n        <Card\n            style={{\n                width: '78vw',\n            }}\n        >\n            <div>\n                <TitleText\n                    style={{\n                        textAlign: 'left',\n                        position: 'flex',\n                        fontSize: '3rem',\n                    }}\n                >\n                    Account Information\n                </TitleText>\n                {/* <h1\n                    style={{\n                        textAlign: 'left',\n                    }}\n                >\n                    {user.firstName}\n                </h1> */}\n                <h3\n                    style={{\n                        textAlign: 'start',\n                        fontSize: '1.3rem',\n                    }}\n                >\n                    Here you can update your account information.\n                </h3>\n                {/* {renderRow('email', 'Email')} */}\n                {renderRow('firstName', 'First Name')}\n                {renderRow('lastName', 'Last Name')}\n                <PrimaryButton\n                    style={{\n                        display: 'block',\n                    }}\n                    onClick={() => validation(userInfo)}\n                >\n                    Save\n                </PrimaryButton>\n                {renderPreferenceSchedule()}\n            </div>\n        </Card>\n    )\n}\n","import * as firebase from 'firebase/app'\nimport 'firebase/auth'\nconst fb = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    databaseURL: process.env.REACT_APP_databaseURL,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n})\n\nexport default fb\n","import React, { useState } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nexport default function UsernameInput(props) {\n    const {\n        style = {},\n        containerStyle = {},\n        onChange = (value) => console.log(value),\n        as = 'row',\n    } = props\n\n    const [appendEmail, setAppendEmail] = useState('@islander.tamucc.edu')\n\n    const handleTextChanged = (text) => {\n        if (text.includes('@') && appendEmail !== '') {\n            setAppendEmail('')\n        } else if (\n            !text.includes('@') &&\n            appendEmail !== '@islander.tamucc.edu'\n        ) {\n            setAppendEmail('@islander.tamucc.edu')\n        }\n        onChange(text)\n    }\n\n    return (\n        <Form.Group as={as}>\n            <Form.Label>Username</Form.Label>\n            <InputGroup style={containerStyle}>\n                <FormControl\n                    placeholder='Username...'\n                    aria-label='Username'\n                    onChange={({ target: { value } }) =>\n                        handleTextChanged(value)\n                    }\n                    style={style}\n                    autoComplete='username'\n                    type='text'\n                />\n                {appendEmail.length > 0 && (\n                    <InputGroup.Append>\n                        <InputGroup.Text>{appendEmail}</InputGroup.Text>\n                    </InputGroup.Append>\n                )}\n            </InputGroup>\n            <Form.Text className='text-muted'>\n                We'll never share this email with anyone else.\n            </Form.Text>\n        </Form.Group>\n    )\n}\n","import Overview from './Screens/Overview'\nimport Shiftswap from './Screens/Shiftswap'\nimport Statistics from './Screens/Statistics'\nimport Schedule from './Screens/Schedule'\nimport Account from './Screens/Account'\nimport Admin from './Screens/Admin'\nimport Logout from './Screens/Logout'\n// All screens here will become a navbar item and a route\nconst Screens = [\n    {\n        name: 'Overview',\n        path: '/overview',\n        component: Overview,\n    },\n    {\n        name: 'Shift Swap',\n        path: '/shiftswap',\n        component: Shiftswap,\n    },\n    {\n        name: 'Statistics',\n        path: '/statistics',\n        component: Statistics,\n    },\n    {\n        name: 'Schedule',\n        path: '/schedule',\n        component: Schedule,\n    },\n    {\n        name: 'Account',\n        path: '/account',\n        component: Account,\n    },\n    {\n        name: 'Admin',\n        path: '/Admin',\n        component: Admin,\n    },\n    {\n        name: 'Logout',\n        path: '/logout',\n        component: Logout,\n    },\n]\nexport default Screens\n","import React from 'react'\n\nexport default function Statistics(props) {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Statistics</h1>\n\t\t\t<h3>This is some statistics content</h3>\n\t\t</div>\n\t)\n}\n","import React, { useState, useEffect } from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport { PrimaryButton } from './../Styles/StyledComponents'\nimport { CreateUser, DeleteUser } from '../API/Mutations/User'\n// import { AuthContext } from './../Components/Auth'\nimport Form from 'react-bootstrap/Form'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Col from 'react-bootstrap/Col'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport fb from './../../../firebase'\nimport Alert from 'react-bootstrap/Alert'\nimport UsernameInput from './../Components/UsernameInput'\n\nexport default function Admin(props) {\n    // const { user } = useContext(AuthContext)\n    const [loading, setLoading] = useState('')\n    const [email, setEmail] = useState('')\n    const [success, setSuccess] = useState(false)\n    const [password, setPassword] = useState('')\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [userType, setUserType] = useState('Employee')\n    const [deleteEmail, setDeleteEmail] = useState('')\n    // const [weeklyMax, setWeeklyMax] = useState(null)\n    // const [dailyMax, setDailyMax] = useState(null)\n    const [error, setError] = useState(false)\n\n    const [createUser, { loading: createLoading }] = useMutation(CreateUser, {\n        onError(e) {\n            setError({ title: 'Error Creating User!', message: e.message })\n        },\n        onCompleted({ createUser }) {\n            setSuccess(\n                `${createUser.firstName}'s account has been successfully created!`\n            )\n            setLoading(false)\n            setEmail('')\n            setFirstName('')\n            setLastName('')\n            setPassword('')\n            setUserType('Employee')\n        },\n    })\n\n    const [deleteUser, { loading: deleteLoading }] = useMutation(DeleteUser, {\n        onError(e) {\n            setError({ title: 'Error Deleting User!', message: e.message })\n        },\n        onCompleted({ deleteUser }) {\n            setLoading(false)\n            if (deleteUser) {\n                setSuccess('User successfully deleted!')\n                setDeleteEmail('')\n            } else {\n                setError({\n                    title: 'Error Deleting User!',\n                    message: 'Unable to find a user with that email.',\n                })\n            }\n        },\n    })\n\n    // Set loading to true if anything is loading\n    useEffect(() => {\n        if (createLoading || deleteLoading) setLoading(true)\n    }, [createLoading, deleteLoading])\n\n    const handleDeleteUser = async (e) => {\n        e.preventDefault()\n        deleteUser({ variables: { email: formatEmail(deleteEmail) } })\n    }\n\n    const formatEmail = (state) => {\n        if (state.includes('@')) return state\n        else return `${state}@islander.tamucc.edu`\n    }\n\n    const handleCreateUser = async (e) => {\n        e.preventDefault()\n        if (firstName.length < 1) {\n            setError({\n                title: 'Cannot Create user.',\n                message: 'A first name is required.',\n            })\n        } else if (lastName.length < 1) {\n            setError({\n                title: 'Cannot Create user.',\n                message: 'A last name is required.',\n            })\n        } else {\n            try {\n                //    Create user in firebase for authentication\n                const {\n                    user: { uid: firebaseID, email: firebaseEmail },\n                } = await fb\n                    .auth()\n                    .createUserWithEmailAndPassword(\n                        formatEmail(email),\n                        password\n                    )\n                // Create user in the database to store information\n                createUser({\n                    variables: {\n                        firebaseID,\n                        first: firstName,\n                        last: lastName,\n                        userType,\n                        email: firebaseEmail,\n                    },\n                })\n            } catch (e) {\n                setError({ title: 'Error Creating User!', message: e.message })\n            }\n        }\n    }\n\n    const genericAlert = (type) => {\n        let onPress = () => setSuccess(false)\n        let title = 'Success!'\n        let message = success\n        let variant = 'success'\n        if (type === 'error') {\n            onPress = () => setError(false)\n            title = error.title\n            message = error.message\n            variant = 'danger'\n        }\n        return (\n            <Alert\n                style={{ position: 'absolute', top: '3vh', right: '40vw' }}\n                variant={variant}\n                onClose={onPress}\n                dismissible\n            >\n                <Alert.Heading>{title}</Alert.Heading>\n                <p>{message}</p>\n                <hr />\n\n                <div className='d-flex justify-content-end'>\n                    <PrimaryButton onClick={onPress} variant='outline-success'>\n                        Okay\n                    </PrimaryButton>\n                </div>\n            </Alert>\n        )\n    }\n\n    const renderErrorAlert = () => {\n        return genericAlert('error')\n    }\n\n    const renderSuccessAlert = () => {\n        return genericAlert('success')\n    }\n\n    return (\n        <div style={{ width: '80%' }}>\n            <h1>Admin</h1>\n            {error && renderErrorAlert()}\n            {success && renderSuccessAlert()}\n            <h2>Create</h2>\n            <Form onSubmit={(e) => handleCreateUser(e)}>\n                <Form.Row>\n                    <UsernameInput\n                        as={Col}\n                        containerStyle={{ width: '100%' }}\n                        onChange={(text) => setEmail(text)}\n                    />\n                    <Form.Group as={Col} controlId='formGridPassword'>\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            onChange={({ target: { value } }) =>\n                                setPassword(value)\n                            }\n                            type='password'\n                            placeholder='Password...'\n                        />\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>First Name</Form.Label>\n                        <Form.Control\n                            onChange={({ target: { value } }) =>\n                                setFirstName(value)\n                            }\n                            type='text'\n                            placeholder='First Name...'\n                        />\n                    </Form.Group>\n                    <Form.Group as={Col}>\n                        <Form.Label>Last Name</Form.Label>\n                        <Form.Control\n                            onChange={({ target: { value } }) =>\n                                setLastName(value)\n                            }\n                            type='text'\n                            placeholder='Last Name...'\n                        />\n                    </Form.Group>\n                </Form.Row>\n                <ListGroup as='ul'>\n                    <ListGroup.Item\n                        as='li'\n                        onClick={() => setUserType('Employee')}\n                        active={userType === 'Employee'}\n                    >\n                        Employee\n                    </ListGroup.Item>\n                    <ListGroup.Item\n                        active={userType === 'Admin'}\n                        onClick={() => setUserType('Admin')}\n                        as='li'\n                    >\n                        Admin\n                    </ListGroup.Item>\n                </ListGroup>\n                <PrimaryButton disabled={loading || error} type='submit'>\n                    Create User\n                </PrimaryButton>\n            </Form>\n            <h2>Delete</h2>\n            <Form onSubmit={(e) => handleDeleteUser(e)}>\n                <UsernameInput\n                    containerStyle={{ width: '30%' }}\n                    onChange={(text) => setDeleteEmail(text)}\n                />\n                <PrimaryButton disabled={loading || error} type='submit'>\n                    Delete User\n                </PrimaryButton>\n            </Form>\n            {/* <h2>Hours</h2>\n            <Form>\n                <Form.Group>\n                    <Form.Label>Weekly Max</Form.Label>\n                    <Form.Control type='text' placeholder='Weekly Max' />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Daily Max</Form.Label>\n                    <Form.Control type='text' placeholder='Daily Max' />\n                </Form.Group>\n                <PrimaryButton type='submit'>\n                Adjust Hour Maxes\n            </PrimaryButton>\n                {renderHoursButton()}\n            </Form> */}\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\nimport { AuthContext } from './../Components/Auth'\nexport default function Logout(props) {\n    const { setUser } = useContext(AuthContext)\n    setUser(null)\n    localStorage.clear()\n    props.history.push('/')\n    return <div></div>\n}\n","import Screens from '../Screens'\nimport { Icon } from 'semantic-ui-react'\nimport { TitleText, Navlink, SubtitleText } from './../Styles/StyledComponents'\nimport Account from '../Screens/Account'\nimport React, { useContext } from 'react'\nimport { AuthContext } from './Auth'\n\nconst logo = require('../Images/IndaysLogo.png')\nexport default function Header() {\n    const { user } = useContext(AuthContext)\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'row',\n                height: '16vh',\n                width: '100vw',\n                textAlign: 'left',\n            }}\n        >\n            <TitleText style={{ fontSize: '6rem' }}>\n                Employee Dashboard\n            </TitleText>\n            <div\n                style={{\n                    flex: 1,\n                    display: 'flex',\n                    justifyContent: 'space-evenly',\n                    alignItems: 'center',\n                    marginRight: '2vw',\n                    fontSize: '2rem',\n                }}\n            >\n                <img\n                    align='middle'\n                    src={logo}\n                    alt='logo'\n                    style={{ height: '23vh' }}\n                />\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        textAlign: 'center',\n                    }}\n                >\n                    <Icon name='user circle' size='big' />\n                    <span>\n                        {user.firstName} {user.lastName}\n                    </span>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport Screens from '../Screens'\nimport { Navlink as Button } from './../Styles/StyledComponents'\nimport { AuthContext } from './Auth'\nexport default function Navbar() {\n    const { user } = useContext(AuthContext)\n    let screensToRender = [...Screens]\n    if (user.userType != 'Admin') {\n        screensToRender = screensToRender.filter(\n            ({ name }) => name !== 'Admin' && name !== 'Schedule'\n        )\n    }\n    return (\n        <ul\n            className='Navbar'\n            style={{\n                fontfamily: 'Poppins',\n                fontstyle: 'normal',\n                fontweight: 'normal',\n                height: '100vh',\n                width: 'auto',\n                listStyle: 'none',\n            }}\n        >\n            {/* This will make all screens as a navbar item */}\n            {screensToRender.map((screen) => {\n                return (\n                    <li style={{ marginBottom: '3vh' }}>\n                        <NavLink\n                            className='tags'\n                            exact={true}\n                            to={`${screen.path}`}\n                        >\n                            <Button>{screen.name}</Button>\n                        </NavLink>\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n","import React, { useContext } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport Header from './Header'\nimport Navbar from './Navbar'\nimport { AuthContext } from './Auth'\n// This is the component that simply checks if the user is authenticated before proceeding to the route.\nexport const ProtectedRoute = ({ component: Component, ...rest }) => {\n    const { user } = useContext(AuthContext)\n    return (\n        <Route\n            {...rest}\n            render={(props) => {\n                if (user) {\n                    return (\n                        <div>\n                            <Header />\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    flexDirection: 'row',\n                                    alignItems: 'flex-start',\n                                }}\n                            >\n                                <Navbar />\n                                <div\n                                    style={{\n                                        justifyContent: 'center',\n                                        display: 'flex',\n                                        flex: 'auto',\n                                    }}\n                                >\n                                    <Component {...props} />\n                                </div>\n                            </div>\n                        </div>\n                    )\n                } else {\n                    return <Redirect to={'/'} />\n                }\n            }}\n        />\n    )\n}\n","import { useLazyQuery, useMutation } from '@apollo/react-hooks'\nimport moment from 'moment'\nimport React, { useContext, useEffect, useState } from 'react'\nimport Alert from 'react-bootstrap/Alert'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport { ClockIn, ClockOut } from '../API/Mutations/User'\nimport { GetUserByFirebaseID } from '../API/Queries/User'\nimport Screens from '../Screens'\nimport '../Styles/Login.css'\nimport fb from './../../../firebase'\nimport { AuthContext } from './../Components/Auth'\nimport UsernameInput from './../Components/UsernameInput'\nimport {\n    Card,\n    PrimaryButton,\n    SubtitleText,\n    TitleText,\n} from './../Styles/StyledComponents'\nconst logo = require('../Images/IndaysLogo.png')\nlet userID = '5e84e996646154001efe8e80'\nmoment.locale('en')\n// This will be changed to david's login component when it is finished\nexport default function Login(props) {\n    const [userName, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    const [forgot, setForgot] = useState(false)\n    const [update1, { loading: clockInLoading }] = useMutation(ClockIn)\n    const [update2, { loading: clockOutLoading }] = useMutation(ClockOut)\n    const [\n        getUserByFirebaseID,\n        { data: UserFromFirebaseID, loading: getUserLoading },\n    ] = useLazyQuery(GetUserByFirebaseID)\n\n    const { user, setUser } = useContext(AuthContext)\n\n    const getLocation = (x) => {\n        function CheckBrowser(position) {\n            if (x === 'in') {\n                update1({\n                    variables: {\n                        location: `Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`,\n                        time: moment().format('MMMM Do YYYY, h:mm:ss a'),\n                        userID: userID,\n                    },\n                })\n                console.log('CLOCK IN COMPLETE')\n            } else if (x === 'out') {\n                update2({\n                    variables: {\n                        location: `Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`,\n                        time: moment().format('MMMM Do YYYY, h:mm:ss a'),\n                        userID: userID,\n                    },\n                })\n                console.log('CLOCK OUT COMPLETE')\n            }\n            console.log('Latitude is :', position.coords.latitude)\n            console.log('Longitude is :', position.coords.longitude)\n            console.log('Geo Success')\n        }\n\n        function ERROR() {\n            console.log('Geo Failure')\n        }\n\n        if (!navigator.geolocation)\n            console.log('Geolocation not supported by browser')\n        else navigator.geolocation.getCurrentPosition(CheckBrowser, ERROR)\n    }\n\n    // This is called to auto-login a user if saved\n    useEffect(() => {\n        const storedFirebaseID = localStorage.getItem('currentUserFirebaseID')\n        if (user) {\n            props.history.push(Screens[0].path)\n        } else if (!getUserLoading && storedFirebaseID) {\n            getUserByFirebaseID({ variables: { firebaseID: storedFirebaseID } })\n        }\n    }, [getUserByFirebaseID, getUserLoading, props.history, setUser, user])\n\n    // This is triggered when the user successfully logs in, or if their id was saved in localstorage\n    useEffect(() => {\n        if (UserFromFirebaseID) {\n            console.log('UserFromFirebaseID')\n            // They have a firebase account and a database account\n            if (UserFromFirebaseID.getUserByFirebaseID) {\n                console.log(\n                    'UserFromFirebaseID.getUserByFirebaseID:',\n                    UserFromFirebaseID.getUserByFirebaseID\n                )\n                const {\n                    _id,\n                    firebaseID,\n                } = UserFromFirebaseID.getUserByFirebaseID\n                localStorage.setItem('currentUserID', _id)\n                localStorage.setItem('currentUserFirebaseID', firebaseID)\n                setUser(UserFromFirebaseID.getUserByFirebaseID)\n                props.history.push('/Admin')\n            } else {\n                // They have a firebase account but no database account\n                localStorage.clear()\n                setError({\n                    title: 'Error Logging You In',\n                    message:\n                        'Contact your administrator. Your account is missing database information)',\n                })\n                setLoading(false)\n                // createUser({variables: { firebaseID, email: userName + '@islander.tamucc.edu', }})\n            }\n        }\n    }, [UserFromFirebaseID, props.history, setUser])\n\n    // Used to set one loading state if any of the functions are loading\n    useEffect(() => {\n        if (clockInLoading || clockOutLoading || getUserLoading)\n            setLoading(true)\n        else setLoading(false)\n    }, [clockInLoading, clockOutLoading, getUserLoading])\n\n    const formatUsername = () => {\n        if (userName.includes('@')) return userName\n        else return `${userName}@islander.tamucc.edu`\n    }\n\n    const handleLoginPressed = async (e) => {\n        // Prevent screen refresh\n        e.preventDefault()\n\n        // Say it is loading\n        setLoading(true)\n\n        // Get the user's auth from firebase for their firebaseID\n        try {\n            const {\n                user: { uid: firebaseID },\n            } = await fb\n                .auth()\n                .signInWithEmailAndPassword(formatUsername(), password)\n\n            // Get the full user from the database with that firebaseID\n            getUserByFirebaseID({ variables: { firebaseID } })\n        } catch (e) {\n            // Display any errors\n            setError({ title: 'Error!', message: e.message })\n            // Set loading as done regardless\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const renderAlert = () => {\n        return (\n            <Alert\n                style={{ position: 'absolute', top: '3vh', right: '40vw' }}\n                variant='danger'\n                onClose={() => setError(false)}\n                dismissible\n            >\n                <Alert.Heading>{error.title}</Alert.Heading>\n                <p>{error.message}</p>\n                <hr />\n\n                <div className='d-flex justify-content-end'>\n                    <PrimaryButton\n                        onClick={() => setError(false)}\n                        variant='outline-success'\n                    >\n                        Okay\n                    </PrimaryButton>\n                </div>\n            </Alert>\n        )\n    }\n\n    const renderForgotPassword = () => {\n        return (\n            <Alert\n                style={{ position: 'absolute', top: '3vh', right: '40vw' }}\n                variant='success'\n                onClose={() => setForgot(false)}\n                dismissible\n            >\n                <Alert.Heading>Password Reset Link Sent!</Alert.Heading>\n                <p>\n                    Intructions to reset your password have been sent to:{' '}\n                    {formatUsername()}\n                </p>\n                <hr />\n                <div className='d-flex justify-content-end'>\n                    <PrimaryButton\n                        onClick={() => setForgot(false)}\n                        variant='outline-success'\n                    >\n                        Okay\n                    </PrimaryButton>\n                </div>\n            </Alert>\n        )\n    }\n\n    const handleResetPressed = async () => {\n        if (userName.length < 2) {\n            setError({\n                title: 'Whoops!',\n                message: 'Please enter your username to reset your password.',\n            })\n            return\n        }\n        try {\n            await fb.auth().sendPasswordResetEmail(formatUsername())\n            setForgot(true)\n        } catch (e) {\n            setError({ title: 'Error Resetting Password', message: e.message })\n        }\n    }\n\n    const makeCard = () => {\n        return (\n            <Card>\n                <div\n                    style={{\n                        textAlign: 'left',\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        flexDirection: 'column',\n                        width: '30vw',\n                    }}\n                >\n                    <TitleText> Login</TitleText>\n                    <SubtitleText>\n                        Clock-in with your username\n                        <br />\n                        Log-in with your username and password\n                    </SubtitleText>\n                    <Form onSubmit={handleLoginPressed}>\n                        <UsernameInput\n                            containerStyle={{ width: '60%' }}\n                            onChange={(text) => setUsername(text)}\n                        />\n                        <Form.Group>\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type='password'\n                                placeholder='Password...'\n                                onChange={({ target: { value } }) =>\n                                    setPassword(value)\n                                }\n                                autoComplete='password'\n                                style={{ width: '60%' }}\n                            />\n                            <u onClick={handleResetPressed}>Forgot Password?</u>\n                        </Form.Group>\n                        <PrimaryButton\n                            disabled={loading || error}\n                            type='submit'\n                        >\n                            Login\n                        </PrimaryButton>\n                    </Form>\n                    <PrimaryButton\n                        disabled={loading || error}\n                        onClick={() => getLocation('in')}\n                    >\n                        Clock In\n                    </PrimaryButton>\n                    <PrimaryButton\n                        disabled={loading || error}\n                        onClick={() => getLocation('out')}\n                    >\n                        Clock Out\n                    </PrimaryButton>\n                </div>\n            </Card>\n        )\n    }\n\n    return (\n        <div\n            id='background'\n            style={{\n                display: 'flex',\n                flexDirection: 'row',\n                width: '100vw',\n                height: '100vh',\n                justifyContent: 'space-around',\n                alignItems: 'center',\n            }}\n        >\n            <img\n                src={logo}\n                alt='indays logo'\n                style={{\n                    height: '30vh',\n                    backgroundColor: 'rgba(255, 255, 255, 0.53)',\n                    borderRadius: '15vh',\n                }}\n            />\n            {error && renderAlert()}\n            {forgot && renderForgotPassword()}\n            {makeCard()}\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from 'apollo-boost'\n\n// Client Docs: https://www.apollographql.com/docs/react/\n\nconst Client = new ApolloClient({\n    uri: 'https://bookworms-api.herokuapp.com/graphql'\n})\n\nexport default Client\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index/index.css'\nimport App from './index/App'\nimport * as serviceWorker from './index/serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport Client from './index/App/API/Client'\n\n// This will register our app with firebase, which will allow us to authenticate users.\n\nReactDOM.render(\n    <ApolloProvider client={Client}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </ApolloProvider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport { ProtectedRoute } from './App/Components/ProtectedRoute'\nimport Login from './App/Screens/Login'\nimport { Route, Switch } from 'react-router-dom'\nimport Screens from './App/Screens'\nimport './App/Styles/App.css'\nimport { AuthProvider } from './App/Components/Auth'\nexport default function App() {\n    return (\n        <AuthProvider>\n            <Switch>\n                <Route exact path='/' component={Login} />\n                {Screens.map((screen) => {\n                    return (\n                        <ProtectedRoute\n                            exact\n                            path={`${screen.path}`}\n                            component={screen.component}\n                        />\n                    )\n                })}\n                <Route path='*' component={Login} />\n            </Switch>\n        </AuthProvider>\n    )\n}\n"],"sourceRoot":""}