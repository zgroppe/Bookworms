{"version":3,"sources":["index/App/Images/IndaysLogo.png","index/App/API/UserDataConstant.js","index/App/API/Mutations/Shifts.js","index/App/API/Queries/User.js","index/App/Components/Auth.js","index/App/API/Queries/Blackout.js","index/App/Styles/StyledComponents.js","index/App/Components/Alerts.js","index/App/Components/LoadingSpinner.js","index/App/Components/Calendar.js","index/App/Screens/Overview.js","index/App/API/Queries/Shifts.js","index/App/API/Mutations/Blackout.js","index/App/Functions/AutoPopConstant.js","index/App/Functions/AutoPopulation.js","index/App/API/Mutations/User.js","index/App/Screens/Account.js","firebase.js","index/App/Components/UsernameInput.js","index/App/Screens.js","index/App/Screens/Shiftswap.js","index/App/Screens/Statistics.js","index/App/Screens/Schedule.js","index/App/Screens/Admin.js","index/App/Screens/Logout.js","index/App/Components/Header.js","index/App/Components/Navbar.js","index/App/Components/ProtectedRoute.js","index/App/Screens/Login.js","index/serviceWorker.js","index/App/API/Client.js","index.js","index/App.js"],"names":["module","exports","eventData","UserData","UpdateUsersShifts","gql","AddTradeBoardShift","RemoveTradeBoardShift","AddPendingShift","AcceptPendingShift","DeclinePendingShift","GetUserByID","GetUserByFirebaseID","GetAllUsers","GetAllUsersId","AuthContext","React","createContext","AuthProvider","children","useState","user","setCurrentUser","Provider","value","setUser","GetBlackouts","Card","styled","div","TitleText","h1","SubtitleText","span","TextInput","input","props","inputColor","borderColor","PrimaryButton","button","SecondButton","a","color","SuccessAlert","message","onClose","Alert","style","position","top","right","variant","dismissible","Heading","className","onClick","ErrorAlert","error","title","LoadingSpinner","height","class","moment","locale","localizer","momentLocalizer","DraggableCalendar","withDragAndDrop","BigCalendar","MyCalendar","memo","events","onSelectEvent","event","console","log","rest","selectable","views","defaultView","Views","WEEK","defaultDate","Date","width","eventPropGetter","backgroundColor","available","myShift","alignSelf","alignContent","slotPropGetter","border","alignItems","components","prev","next","blackoutDays","GetTradeBoardShifts","GetPendingShifts","CreateBlackout","SCHEDULEFORMULA","time","slot","SCHEDULE","WEEKLYMAX","DAILYMAX","weeklyMax","dailyMax","AutoPopulation","localStorage","getItem","autoPopulate","weekResult","forEach","item","index","concat","itemList","indexArray","canWork","id","usersArr","data","getUsers","dayArray","_id","preferences","firstName","start","end","startDate","endDate","getDay","push","empID","emp","parseInt","dayResult","hour","split","minute","filteredEmployees","filter","getHours","Number","isInteger","max","length","shiftTime","assigned","highValueFilteredEmployees","random","taken","Math","floor","includes","splice","dayResultObj","prevEmployees","highValIndex","newObj","dayFinalResult","certainDay","certainMonth","employee","theirStartMinute","theirEndHour","noLongerScheduled","iter","theirStartHour","stillGoing","day","useQuery","loading","refetch","networkStatus","todo","totalPreferredTime","UpdateUser","CreateUser","DeleteUser","ClockIn","ClockOut","options","label","DAYS","fb","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","UsernameInput","containerStyle","flexDirection","display","onChange","appendEmail","setAppendEmail","handleTextChanged","text","Form","Group","Label","Input","icon","iconPosition","target","placeholder","aria-label","autoComplete","type","InputGroup","Append","Text","Screens","name","path","component","myShifts","setMyShifts","otherShifts","setOtherShifts","blackoutDates","setBlackoutDates","setError","setLoading","useContext","useEffect","formattedShifts","shifts","map","loadingBlackouts","onError","onCompleted","temp","getBlackouts","getDates","loadingAllUsers","otherUsers","shift","stopDate","dateArray","Array","currentDate","addDays","prototype","days","date","this","valueOf","setDate","getDate","useMutation","shiftsToPush","textAlign","fontSize","dayPropGetter","i","arr","x","getMonth","getFullYear","window","confirm","some","blackoutDate","toDateString","alert","variables","userID","shiftID","tempShift","tradeBoardShifts","setTradeBoardShifts","pendingApprovalShifts","setPendingApprovalShifts","success","setSuccess","information","setInformation","selectedEvent","setSelectedEvent","useLazyQuery","getTradeBoardShifts","loadingTradeBoard","getPendingShifts","loadingPending","removeTradeBoardShift","findIndex","removeTradeBoardShiftLoading","addPendingShift","addPendingShiftLoading","acceptPendingShift","acceptPendingShiftLoading","declinePendingShift","declinePendingShiftLoading","userType","handlePickupTradeBoard","toUserID","fromUserID","full_user","handleRemoveTradeBoard","handleApprovePending","handleDeclinePending","renderCalendar","onAccept","onDecline","fliexDirection","justifyContent","Button","marginRight","renderInformativeAlert","myEventsList","setMyEventsList","colorPicked","blackoutStart","setBlackoutStart","blackoutEnd","setBlackoutEnd","AutoPopulationSchedule","setAutoPopulationSchedule","setWeeklyMax","setDailyMax","addBlackout","updateShifts","notifyOnNetworkStatusChange","loading3","error3","data3","moveEvent","tempArr","resizeEvent","indexOf","handleBlackoutDate","blackoutStartDate","blackoutStartDate2","JSON","stringify","renderDatePicker","statename","functionName","selected","onSelect","minDate","maxDate","renderBlackout","align","e","toISOString","onEventDrop","onEventResize","sm","Control","defaultValue","setItem","fromChild","formattedForDB","nextWeek","allShifts","currentWeek","myVar","Object","values","users","sendAutoPopulatedShiftsToDB","deleteSpot","tempArray","onSelectSlot","prompt","hex","draggableAccessor","userInfo","setUserInfo","myPreferencesList","setMyPreferencesList","dropdownValue","setDropdownValue","copyFrom","setCopyFrom","copyTo","setCopyTo","update","prefArray","sort","b","reFormatPreferenceList","updateUser","renderRow","state","email","lastName","first","last","validation","startingDate","endingDate","newStart","getMinutes","getSeconds","newEnd","handlePreferenceCopy","toolbar","formats","dayFormat","culture","format","view","toString","setEmail","password","setPassword","setFirstName","setLastName","isEmployee","setIsEmployee","deleteEmail","setDeleteEmail","createUser","createLoading","deleteUser","deleteLoading","handleDeleteUser","preventDefault","formatEmail","handleCreateUser","auth","createUserWithEmailAndPassword","firebaseID","uid","firebaseEmail","genericAlert","onPress","renderInput","flex","onSubmit","Row","toggle","positive","Or","disabled","fill","clear","history","logo","require","Header","src","alt","Icon","size","Navbar","screensToRender","fontfamily","fontstyle","fontweight","listStyle","screen","widths","exact","as","NavLink","to","ProtectedRoute","Component","render","Login","userName","setUsername","clockComplete","clockIn","clockInLoading","clockOut","clockOutLoading","getUserByFirebaseID","getUserLoading","getLocation","inOrOut","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","location","formatUsername","storedFirebaseID","handleLoginPressed","signInWithEmailAndPassword","handleResetPressed","sendPasswordResetEmail","borderRadius","Boolean","hostname","match","Client","ApolloClient","uri","ReactDOM","client","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.321d2f03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IndaysLogo.de1409c4.png\";","const eventData = ` title\nstart\nend\ncolor\nvalue\n_id\navailable\n`\n\nexport const UserData = `\n    _id\n    firebaseID\n    email\n    userType\n    firstName\n    lastName\n    preferences {${eventData}}\n    shifts {${eventData}}\n`\n","import { gql } from 'apollo-boost'\nimport { UserData } from '../UserDataConstant'\n\n//API hook for the database mutation UpdateUsersShifts\nexport const UpdateUsersShifts = gql`\n    mutation UpdateUsersShifts($users: [UpdateUserShift!]!) {\n        updateUsersShifts(users: $users) {\n            _id\n        }\n    }\n`\n\n//API hook for the database mutation AddTradeBoardShifts\nexport const AddTradeBoardShift = gql`\n    mutation addTradeBoardShift(\n        $shiftID: String!,\n        $userID: String!\n        ) {\n        addTradeBoardShift(\n            shiftID: $shiftID,\n            userID: $userID\n        ){_id}\n    }\n`\n\n//API hook for the database mutation RemoveTradeBoardShift\nexport const RemoveTradeBoardShift = gql`\n    mutation removeTradeBoardShift(\n        $shiftID: String!,\n        $userID: String!\n        ) {\n        removeTradeBoardShift(\n            shiftID: $shiftID,\n            userID: $userID\n        )\n    }\n`\n\n//API hook for the database mutation AddPendingShift\nexport const AddPendingShift = gql`\n    mutation addPendingShift(\n        $toUserID: String!,\n        $fromUserID: String!,\n        $shiftID: String!\n        ) {\n        addPendingShift(\n            toUserID: $toUserID,\n            fromUserID: $fromUserID,\n            shiftID: $shiftID\n        )\n    }\n`\n\n//API hook for the database mutation AcceptPendingShift\nexport const AcceptPendingShift = gql`\n    mutation acceptPendingShift(\n        $shiftID: String!\n        ) {\n        acceptPendingShift(\n            shiftID: $shiftID\n        )\n    }\n`\n\n//API hook for the database mutation DeclinePendingShift\nexport const DeclinePendingShift = gql`\n    mutation declinePendingShift(\n        $shiftID: String!\n        ) {\n        declinePendingShift(\n            shiftID: $shiftID\n        )\n    }\n`","import { gql } from 'apollo-boost'\nimport { UserData } from '../UserDataConstant'\n\n//API hook for the database query GetUserByID\nexport const GetUserByID = gql`\n    query getUserByID($id: String!) {\n        getUserByID(id: $id) {\n            ${UserData}\n        }\n    }\n`\n\n//API hook for the database query GetUserByFirebaseID\nexport const GetUserByFirebaseID = gql`\n    query getUserByFirebaseID($firebaseID: String!) {\n        getUserByFirebaseID(firebaseID: $firebaseID) {\n            ${UserData}\n        }\n    }\n`\n\n//API hook for the database query GetAllUsers\nexport const GetAllUsers = gql`\n    query {\n        getUsers {\n            ${UserData}\n        }\n    }\n`\n\n//API hook for the database query GetAllUsersId\nexport const GetAllUsersId = gql`\n    query {\n        getUsers {\n            _id\n        }\n    }\n`","import React, { useState } from 'react'\nexport const AuthContext = React.createContext()\nexport const AuthProvider = ({ children }) => {\n    const [user, setCurrentUser] = useState(null)\n    return (\n        <AuthContext.Provider\n            value={{\n                user,\n                setUser: (user) => setCurrentUser(user),\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    )\n}\n","import { gql } from 'apollo-boost'\r\nimport { UserData } from '../UserDataConstant'\r\n\r\n//API hook for the database query GetBlackouts\r\nexport const GetBlackouts = gql`\r\n    query {\r\n        getBlackouts {\r\n            _id\r\n            start\r\n            end\r\n        }\r\n    }\r\n`","import styled from 'styled-components'\r\n\r\nexport const Card = styled.div`\r\n    background: white;\r\n    padding: 2%;\r\n    border: 3px solid rgba(133, 133, 133, 0.14);\r\n    box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.45);\r\n    border-radius: 25px;\r\n`\r\n\r\nexport const TitleText = styled.h1`\r\n    font-family: 'Poppins';\r\n    font-size: 72px;\r\n    font-weight: bold;\r\n    padding: 1%;\r\n    margin: 0;\r\n    background: linear-gradient(#ff7a7a, #510808);\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n`\r\n\r\nexport const SubtitleText = styled.span`\r\n    font-family: Poppins;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 16px;\r\n    line-height: 30px;\r\n    position: relative;\r\n    //top: 277px;\r\n    color: #8c8989;\r\n`\r\n\r\nexport const TextInput = styled.input`\r\n    font-family: Poppins;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 18px;\r\n    padding: 0.5em;\r\n    padding-left: 3em;\r\n    margin: 1em;\r\n    color: ${(props) => props.inputColor || '#235CB9'};\r\n    background: transparent;\r\n    width: 20vw;\r\n    height: 2.3em;\r\n    border: none;\r\n    border-bottom: 1px solid;\r\n    &:focus {\r\n        border-bottom: 1px solid #1cd1a1; // <Thing> when hovered\r\n    }\r\n    border-color: ${(props) => props.borderColor || '#C7C7C7'};\r\n`\r\n\r\nexport const PrimaryButton = styled.button`\r\n    background: linear-gradient(180deg, #303030 0%, #060303 100%);\r\n    border-radius: 10px;\r\n    margin: 1em;\r\n    width: 247px;\r\n    height: 39px;\r\n    color: white;\r\n    font-size: 16px;\r\n    border: 0px;\r\n    text-align: center;\r\n`\r\nexport const SecondButton = styled.button`\r\n    background: linear-gradient(132.5deg, #000000 0%, #353535 59.95%);\r\n    border-radius: 100px;\r\n    width: 12vw;\r\n    height: 6vh;\r\n    color: white;\r\n    font-size: 16px;\r\n    \r\n    text-align: center;\r\n`\r\nexport const Hyperlink = styled.a`\r\n    font-family: Poppins;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 14px;\r\n    color: #3385ff;\r\n    text-decoration: underline;\r\n`\r\n\r\nexport const Swatch = styled.div`\r\n    padding: 5px;\r\n    background: #fff;\r\n    border-radius: 1px;\r\n    boxshadow: '0 0 0 1px rgba(0,0,0,.1)';\r\n    display: inline-block;\r\n    cursor: pointer;\r\n`\r\n\r\nexport const Color = styled.div`\r\n    width: 36px;\r\n    height: 14px;\r\n    border-radius: 2px;\r\n    margin: 2px;\r\n    background: ${(props) => (props.color ? props.color : 'black')};\r\n`\r\nexport const Navlink = styled.button`\r\n    background: linear-gradient(179.63deg, #ff7a7a -13.56%, #510808 158.3%);\r\n    width: 12vw;\r\n    height: 6vh;\r\n    color: white;\r\n    font-family: Poppins;\r\n    font-size: 1.2rem;\r\n    border-radius: 4.5vw;\r\n    align-self: 'flex-start';\r\n    justify-self: 'flex-start';\r\n`\r\n","import React from 'react'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport { PrimaryButton } from './../Styles/StyledComponents'\r\nexport function SuccessAlert(props) {\r\n    const { message, onClose } = props\r\n    return (\r\n        <Alert\r\n            style={{ position: 'absolute', top: '3vh', right: '40vw' }}\r\n            variant='success'\r\n            onClose={onClose}\r\n            dismissible\r\n        >\r\n            <Alert.Heading>{'Success!'}</Alert.Heading>\r\n            <p>{message}</p>\r\n            <hr />\r\n\r\n            <div className='d-flex justify-content-end'>\r\n                <PrimaryButton onClick={onClose} variant='outline-success'>\r\n                    Okay\r\n                </PrimaryButton>\r\n            </div>\r\n        </Alert>\r\n    )\r\n}\r\n\r\nexport function ErrorAlert(props) {\r\n    const { error, onClose } = props\r\n    return (\r\n        <Alert\r\n            style={{ position: 'absolute', top: '3vh', right: '40vw' }}\r\n            variant='danger'\r\n            onClose={onClose}\r\n            dismissible\r\n        >\r\n            <Alert.Heading>{error.title}</Alert.Heading>\r\n            <p>{error.message}</p>\r\n            <hr />\r\n\r\n            <div className='d-flex justify-content-end'>\r\n                <PrimaryButton onClick={onClose} variant='outline-success'>\r\n                    Okay\r\n                </PrimaryButton>\r\n            </div>\r\n        </Alert>\r\n    )\r\n}\r\n","import React from 'react'\r\nexport default function LoadingSpinner(props) {\r\n    const { style = { height: '80vh' } } = props\r\n    return (\r\n        <div class='ui segment' style={style}>\r\n            <div class='ui active loader'></div>\r\n            <p></p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { memo } from 'react'\r\nimport {\r\n    Calendar as BigCalendar,\r\n    momentLocalizer,\r\n    Views,\r\n} from 'react-big-calendar'\r\nimport moment from 'moment'\r\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\r\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css'\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nmoment.locale('en')\r\nconst localizer = momentLocalizer(moment)\r\nconst DraggableCalendar = withDragAndDrop(BigCalendar)\r\n\r\n//Function handling the creation of calendars used on different pages\r\nfunction Calendar(props) {\r\n    const {\r\n        events = [],\r\n        onSelectEvent = (event) => console.log({ event }),\r\n        ...rest\r\n    } = props\r\n    const Event = ({ event }) => {\r\n        return <p style={{ color: 'yellow' }}>{event.title}</p>\r\n    }\r\n    return (\r\n        <DraggableCalendar\r\n            selectable\r\n            localizer={localizer}\r\n            events={events}\r\n            views={['month', 'week']}\r\n            defaultView={Views.WEEK}\r\n            defaultDate={new Date()}\r\n            onSelectEvent={onSelectEvent}\r\n            style={{ height: '80vh', width: '90%' }}\r\n            eventPropGetter={(event) => ({\r\n                style: {\r\n                    backgroundColor: event.available\r\n                        ? 'darkred'\r\n                        : event.myShift\r\n                        ? 'green'\r\n                        : event.color,\r\n                    alignSelf: 'center',\r\n                    alignContent: 'center',\r\n                },\r\n            })}\r\n            slotPropGetter={() => ({\r\n                style: {\r\n                    border: 'none',\r\n                    alignItems: 'center',\r\n                },\r\n            })}\r\n            components={{\r\n                event: Event,\r\n            }}\r\n            {...rest}\r\n        />\r\n    )\r\n}\r\nconst MyCalendar = memo(Calendar, (prev, next) => {\r\n    return false\r\n})\r\n\r\n// const MyCalendar = debounceRender(Calendar, 10000, { leading: false })\r\n\r\nexport default MyCalendar\r\n","import { useMutation, useQuery } from '@apollo/react-hooks'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { AddTradeBoardShift } from '../API/Mutations/Shifts'\r\nimport { GetAllUsers } from '../API/Queries/User'\r\nimport { AuthContext } from '../Components/Auth'\r\nimport { GetBlackouts } from './../API/Queries/Blackout'\r\nimport { Card, TitleText,SubtitleText } from './../Styles/StyledComponents'\r\nimport { ErrorAlert } from './../Components/Alerts'\r\nimport LoadingSpinner from './../Components/LoadingSpinner'\r\nimport MyCalendar from './../Components/Calendar'\r\n\r\nlet blackoutDays = []\r\n\r\nexport default function Overview(props) {\r\n    //states or variables  such as\r\n    // myShifts = to be rendered in the calendar (can be dropped)\r\n    // otherShifts = to be rendered in the calendar\r\n    // blackoutDates = to be rendered in the calendar (prevent shift dropping in this period)\r\n    const [myShifts, setMyShifts] = useState([])\r\n    const [otherShifts, setOtherShifts] = useState([])\r\n    const [blackoutDates, setBlackoutDates] = useState([])\r\n    const [error, setError] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const { user } = useContext(AuthContext)\r\n\r\n    useEffect(() => {\r\n        //When the screen loads\r\n        if (myShifts.length === 0) {\r\n            const formattedShifts = user.shifts.map(\r\n                ({ start, end, ...rest }) => {\r\n                    //Changing string to date object to be rendered in the calendar\r\n                    let startDate = new Date(start)\r\n                    let endDate = new Date(end)\r\n                    return {\r\n                        start: startDate,\r\n                        end: endDate,\r\n                        ...rest,\r\n                        myShift: true,\r\n                    }\r\n                }\r\n            )\r\n            //setting state\r\n            setMyShifts(formattedShifts)\r\n        }\r\n    }, [myShifts, user])\r\n\r\n    const { loading: loadingBlackouts } = useQuery(GetBlackouts, {\r\n        onError({ message }) {\r\n            setError({ title: 'Error Fetching Blackout Dates!', message })\r\n        },\r\n        //onCompleted data2 = blackout data from API call GetBlackouts\r\n        onCompleted({ getBlackouts }) {\r\n            const temp = getBlackouts.map(({ start, end }) => {\r\n                //Changing string to date object to be rendered in the calendar\r\n                let startDate = new Date(start)\r\n                let endDate = new Date(end)\r\n                return { start: startDate, end: endDate }\r\n            })\r\n\r\n            temp.forEach(({ start, end }) => {\r\n                blackoutDays.push(...getDates(start, end))\r\n            })\r\n            //setting state\r\n            setBlackoutDates(temp)\r\n        },\r\n    })\r\n\r\n    const { loading: loadingAllUsers } = useQuery(GetAllUsers, {\r\n        onError({ message }) {\r\n            setError({ title: \"Error Fetching All Users' Shifts!\", message })\r\n        },\r\n        //onCompleted getUsers = all users data from API call GetAllUsers\r\n        onCompleted({ getUsers }) {\r\n            let otherUsers = getUsers.filter(({ _id }) => _id !== user._id)\r\n            let otherShifts = []\r\n            otherUsers.forEach(({ shifts }) => {\r\n                shifts.forEach((shift) => {\r\n                    //Changing string to date object to be rendered in the calendar\r\n                    shift.start = new Date(shift.start)\r\n                    shift.end = new Date(shift.end)\r\n                    otherShifts.push({ ...shift, myShift: false })\r\n                })\r\n            })\r\n            //setting state\r\n            setOtherShifts(otherShifts)\r\n        },\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (loadingBlackouts || loadingAllUsers) setLoading(true)\r\n        else setLoading(false)\r\n    }, [loadingAllUsers, loadingBlackouts])\r\n\r\n    Date.prototype.addDays = function (days) {\r\n        var date = new Date(this.valueOf())\r\n        date.setDate(date.getDate() + days)\r\n        return date\r\n    }\r\n\r\n    /*\r\n    Function Name: getDates\r\n    Parameter: startDate - beginning of the specific period\r\n                stopDate - end of the specific period\r\n\r\n    this function is used for blackout dates to get the difference on start and end  to be rendered in the calendar\r\n    */\r\n    function getDates(startDate, stopDate) {\r\n        var dateArray = new Array()\r\n        var currentDate = startDate\r\n        while (currentDate <= stopDate) {\r\n            dateArray.push(new Date(currentDate))\r\n            currentDate = currentDate.addDays(1)\r\n        }\r\n        return dateArray\r\n    }\r\n\r\n    const [shiftsToPush] = useMutation(AddTradeBoardShift)\r\n\r\n    const renderCalendar = () => {\r\n        //render function that indicates that specific period is blacked out\r\n        // by iterating blackout state\r\n        const handleBlackoutDate = (date) => {\r\n            for (let i in blackoutDates) {\r\n                let blackoutStartDate = blackoutDates[i].start\r\n                let blackoutStartDate2 = blackoutDates[i].end\r\n                let arr = getDates(blackoutStartDate, blackoutStartDate2)\r\n                for (let x in arr) {\r\n                    if (\r\n                        date.getDate() === arr[x].getDate() &&\r\n                        date.getMonth() === arr[x].getMonth() &&\r\n                        date.getFullYear() === arr[x].getFullYear()\r\n                    ) {\r\n                        return {\r\n                            style: {\r\n                                backgroundColor: '#000',\r\n                            },\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /*\r\n            Function Name: handleDrop\r\n            Parameter: event - calendar event when the user click on a specific event\r\n\r\n            Handle drop the user's shift, \r\n            validation = 1. can't drop other users' shift,  \r\n                        2. can't drop shift on the blackout period\r\n            */\r\n        const handleDrop = (event) => {\r\n            //validation 1\r\n            if (event.myShift) {\r\n                const check = window.confirm(\r\n                    '\\nDo you want to drop this shift: Ok - YES, Cancel - NO'\r\n                )\r\n                if (check) {\r\n                    //validation 2\r\n                    const isUnableToBeDropped = blackoutDays.some(\r\n                        (blackoutDate) => {\r\n                            return (\r\n                                blackoutDate.toDateString() ===\r\n                                    event.start.toDateString() ||\r\n                                blackoutDate.toDateString() ===\r\n                                    event.end.toDateString()\r\n                            )\r\n                        }\r\n                    )\r\n\r\n                    if (!isUnableToBeDropped) {\r\n                        //API call to add the shift to the tradeboard\r\n                        shiftsToPush({\r\n                            variables: { userID: user._id, shiftID: event._id },\r\n                        })\r\n\r\n                        //modifying state so that user can see the difference that indicates the shift\r\n                        //is available on the tradeboard\r\n                        let tempShift = [...myShifts]\r\n                        tempShift.forEach((item) => {\r\n                            if (item._id === event._id) item.available = true\r\n                        })\r\n                        //re-render by setting the new user's shift\r\n                        setMyShifts(tempShift)\r\n                    } else {\r\n                        alert('You are unable to drop your shift on this day.')\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <MyCalendar\r\n                events={myShifts.concat(otherShifts)}\r\n                dayPropGetter={handleBlackoutDate}\r\n                onSelectEvent={handleDrop}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                width: '95%',\r\n            }}\r\n        >\r\n            <div>\r\n            <TitleText style={{\r\n                    textAlign: 'left',\r\n                    position: 'flex',\r\n                    fontSize: '3.2rem',\r\n                }}>Overview</TitleText>\r\n            <SubtitleText>Here you may view your weekly work schedule. </SubtitleText>\r\n            <br />\r\n            <br />\r\n                {error && (\r\n                    <ErrorAlert error={error} onClose={() => setError(false)} />\r\n                )}\r\n                {loading ? (\r\n                    <LoadingSpinner style={{ height: '100vh' }} />\r\n                ) : (\r\n                    renderCalendar()\r\n                )}\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n","import { gql } from 'apollo-boost'\r\nimport { UserData } from '../UserDataConstant'\r\n\r\n//API hook for the database query GetTradeBoardShifts\r\nexport const GetTradeBoardShifts = gql`\r\n    query {\r\n        getTradeBoardShifts {\r\n            _id\r\n            title\r\n            start\r\n            end\r\n            color\r\n            available\r\n            full_user{_id}\r\n        }\r\n    }\r\n`\r\n\r\n//API hook for the database query GetPendingShifts\r\nexport const GetPendingShifts = gql`\r\n    query {\r\n        getPendingShifts {\r\n            _id\r\n            title\r\n            start\r\n            end\r\n            color\r\n            available\r\n            fromUserID\r\n            toUserID\r\n        }\r\n    }\r\n`","import { gql } from 'apollo-boost'\r\nimport { UserData } from '../UserDataConstant'\r\n\r\n//API hook for the database mutation CreateBlackout\r\nexport const CreateBlackout = gql`\r\n    mutation createBlackout(\r\n        $start: String!,\r\n        $end: String!\r\n    ) {\r\n        createBlackout(\r\n            start: $start,\r\n            end: $end\r\n        ){_id}\r\n    }\r\n`","const SCHEDULEFORMULA = [\n    [\n        //SUNDAY\n        { time: '9:00', slot: 1 },\n        { time: '10:00', slot: 1 },\n        { time: '11:00', slot: 2 },\n        { time: '12:00', slot: 2 },\n        { time: '13:00', slot: 2 },\n        { time: '14:00', slot: 2 },\n        { time: '15:00', slot: 2 },\n        { time: '16:00', slot: 2 },\n        { time: '17:00', slot: 2 },\n        { time: '18:00', slot: 2 },\n        { time: '19:00', slot: 2 },\n        { time: '20:00', slot: 2 },\n        { time: '21:00', slot: 1 },\n        { time: '22:00', slot: 1 },\n        { time: '22:30', slot: 1 },\n    ],\n    [\n        //MON - THU\n        { time: '7:30', slot: 2 },\n        { time: '8:00', slot: 2 },\n        // {time: '08:30',slot: 2},\n        { time: '9:00', slot: 2 },\n        // {time: '09:30',slot: 2}, \n        { time: '10:00', slot: 2 },\n        // {time: '10:30',slot: 2}, \n        { time: '11:00', slot: 3 },\n        // {time: '11:30',slot: 3}, \n        { time: '12:00', slot: 3 },\n        // {time: '12:30',slot: 3}, \n        { time: '13:00', slot: 3 },\n        // {time: '13:30',slot: 3}, \n        { time: '14:00', slot: 3 },\n        // {time: '14:30',slot: 3}, \n        { time: '15:00', slot: 3 },\n        // {time: '15:30',slot: 3}, \n        { time: '16:00', slot: 3 },\n        // {time: '16:30',slot: 3}, \n        { time: '17:00', slot: 3 },\n        // {time: '17:30',slot: 3}, \n        { time: '18:00', slot: 3 },\n        // {time: '18:30',slot: 3}, \n        { time: '19:00', slot: 2 },\n        // {time: '19:30',slot: 2}, \n        { time: '20:00', slot: 2 },\n        // {time: '20:30',slot: 2}, \n        { time: '21:00', slot: 2 },\n        // {time: '21:30',slot: 2}, \n        { time: '22:00', slot: 2 },\n        // {time: '22:30',slot: 2}, \n        { time: '23:00', slot: 1 },\n        // {time: '23:30',slot: 1}, \n    ],\n    [\n        //FRIDAY\n        { time: '7:30', slot: 2 },\n        { time: '8:00', slot: 2 },\n        { time: '9:00', slot: 2 },\n        { time: '10:00', slot: 2 },\n        // {time:'10:30' ,slot: 2},\n        { time: '11:00', slot: 3 },\n        { time: '12:00', slot: 3 },\n        { time: '13:00', slot: 3 },\n        { time: '14:00', slot: 3 },\n        { time: '15:00', slot: 3 },\n        // {time:'15:30' ,slot: 3},\n        { time: '16:00', slot: 2 },\n        { time: '17:00', slot: 2 },\n        { time: '18:00', slot: 2 },\n        { time: '19:00', slot: 2 },\n    ],\n    [\n        //SATURDAY\n        { time: '10:00', slot: 2 },\n        { time: '11:00', slot: 2 },\n        { time: '12:00', slot: 2 },\n        { time: '13:00', slot: 2 },\n        { time: '14:00', slot: 2 },\n        { time: '15:00', slot: 2 },\n        { time: '16:00', slot: 2 },\n        { time: '17:00', slot: 2 },\n    ],\n]\n\nexport const SCHEDULE = [\n    SCHEDULEFORMULA[0],\n    SCHEDULEFORMULA[1],\n    SCHEDULEFORMULA[1],\n    SCHEDULEFORMULA[1],\n    SCHEDULEFORMULA[1],\n    SCHEDULEFORMULA[2],\n    SCHEDULEFORMULA[3]\n]","import { useQuery } from '@apollo/react-hooks'\nimport React from 'react'\nimport { GetAllUsers } from '../API/Queries/User'\nimport { PrimaryButton } from './../Styles/StyledComponents'\nimport { SCHEDULE } from './AutoPopConstant'\n\n//Check for what value the weekly max value is going to be using local storage\nconst checkWeekly = () => {\n        if(localStorage.getItem('currentWeeklyMax') && localStorage.getItem('currentWeeklyMax') > 0)\n        {\n                return localStorage.getItem('currentWeeklyMax')\n        }\n        else\n        {\n                return 20\n        }\n}\n\n//Check for what value the daily max value is going to be using local storage\nconst checkDaily = () => {\n        if(localStorage.getItem('currentDailyMax') && localStorage.getItem('currentDailyMax') > 0)\n        {\n                return localStorage.getItem('currentDailyMax')\n        }\n        else\n        {\n                return 7\n        }\n}\n\n//Global variables for use later in this program\nlet WEEKLYMAX = 0\nlet DAILYMAX = 0\nlet weeklyMax = {}\nlet dailyMax = {}\n\nexport default function AutoPopulation(props) {\n\n        //Assign value of that of the weekly and daily max values\n        WEEKLYMAX = checkWeekly()\n        DAILYMAX = checkDaily()\n        \n        //Day function, going through each day of the week for auto population\n        const day = (itemList, indexArray) => {\n\n                //Function figuring out if someone is available to work\n                const canWork = (id) => {\n                        if (dailyMax[id] < DAILYMAX && weeklyMax[id] < WEEKLYMAX) {\n                                dailyMax[id]++\n                                weeklyMax[id]++\n                                return true\n                        }\n                        else return false\n                }\n\n                //Setup vars for our following daily operations\n                let usersArr = data.getUsers\n                let dayArray = []\n\n                //Get user preferences\n                usersArr.forEach(({ _id, preferences, firstName }) => {\n\n                        dailyMax[_id] = 0\n                        if (!(_id in weeklyMax)) weeklyMax[_id] = 0\n\n                        //Assign user preferences to larger day array\n                        preferences.forEach(({ start, end, value }) => {\n                                let startDate = new Date(start)\n                                let endDate = new Date(end)\n                                if (startDate.getDay() === indexArray) {\n                                        dayArray.push({ empID: _id, emp: firstName, startDate, endDate, value: parseInt(value) })\n                                }\n                        })\n\n                });\n\n                let dayResult = []\n\n                //Loop going through all of those available and assigning them to a time slot\n                itemList.forEach(({ time, slot }, index) => {\n                        let hour = parseInt(time.split(':')[0])\n                        let minute = parseInt(time.split(':')[1])\n\n                        //Filter employees once based off of preferred starting time being before or at the same time of shift start,\n                        //preferred end time is at or later than shift end, and preference being checked is not where the employee is in class\n                        let filteredEmployees = dayArray.filter(({ startDate, endDate, value }) => {\n                                return (startDate.getHours() <= hour && endDate.getHours() >= hour + 1 && value !== -100 && Number.isInteger(value))\n                        })\n\n                        let max = -1\n\n                        //If else handling the assigning of employees to shifts part\n                        //First if handles if no employee is available at the time\n                        if (filteredEmployees.length === 0) {\n                                dayResult.push({ shiftTime: { hour, minute }, assigned: [] })\n                        }\n                        //This else handles in the case there are more than one available\n                        else {\n                                //Filter finding the employee\n                                filteredEmployees.forEach(({ value }) => {\n                                        if (value > max) max = value\n                                })\n\n                                //Filters to focus on those with the highest preference value\n                                let highValueFilteredEmployees = filteredEmployees.filter(({ value }) => value === max)\n\n                                //If statement handling assigning to shifts but now focusing on the employees with the highest preference value\n                                //if preferred available employees count is less than slot\n                                if (highValueFilteredEmployees.length < slot) {\n                                        let taken = []\n                                        let random\n\n                                        if (max >= 0) {\n                                                filteredEmployees = filteredEmployees.filter(({ value }) => {\n                                                        return max === 1 ? value === 0 : value === -1\n                                                })\n                                        }\n\n                                        //Loop going through if there are multiple employees available, and picking the best one\n                                        while (highValueFilteredEmployees.length < slot && filteredEmployees.length !== 0) {\n                                                random = Math.floor(Math.random() * filteredEmployees.length)\n\n                                                if (!taken.includes(random)) {\n                                                        highValueFilteredEmployees.push(filteredEmployees[random])\n                                                        filteredEmployees.splice(random, 1)\n                                                        taken.push(random)\n                                                }\n\n                                        }\n                                }\n\n                                //Further focus on that of the ending set of shifts\n                                let dayResultObj = { shiftTime: { hour, minute }, assigned: [] }\n\n                                //If else handling search for available employee to assign a shift to\n                                //Handling if no one is available\n                                if (highValueFilteredEmployees === 0) {\n                                        dayResult.push('NOTHING HERE')\n                                }\n                                //Handles if there are less available then the time slot allows\n                                else if (highValueFilteredEmployees.length <= slot) {\n\n                                        //Assigns just who is available\n                                        highValueFilteredEmployees.forEach((item) => {\n                                                if (canWork(item.empID)) {\n                                                        dayResultObj.assigned.push(item)\n                                                }\n                                        })\n                                        dayResult.push(dayResultObj)\n                                }\n                                //Else handling if there are multiple employees to choose from\n                                else if (highValueFilteredEmployees.length > slot) {\n\n                                        let prevEmployees = []\n                        \n                                        //Finds out who was previously assigned\n                                        if (index !== 0) {\n                                                dayResult[index - 1].assigned.forEach(({ empID }) => {\n                                                        prevEmployees.push(empID)\n                                                })\n                                        }\n\n                                        //Finds out if previously assigned persons are available at current slot too\n                                        highValueFilteredEmployees.forEach((item, highValIndex) => {\n                                                if (prevEmployees.includes(item.empID) && dayResultObj.assigned.length < slot && canWork(item.empID)) {\n                                                        dayResultObj.assigned.push(item)\n                                                        highValueFilteredEmployees.splice(highValIndex, 1)\n                                                }\n                                        })\n                                        \n                                        //Finds out other people that can work that weren't already scheduled previously\n                                        highValueFilteredEmployees.forEach((item, highValIndex) => {\n                                                if (dayResultObj.assigned.length < slot && canWork(item.empID)) {\n                                                        dayResultObj.assigned.push(item)\n                                                }\n                                        })\n\n                                        dayResult.push(dayResultObj)\n                                }\n                        }\n                })\n\n                //Vars to be used in finalizing shifts to be sent to the admin schedule\n                let dayFinalResult = []\n                let newObj\n                let certainDay = 29\n                let certainMonth = 2\n\n                //This if handles the adjustment of our date to push\n                if (indexArray <= 2) {\n                        certainDay = certainDay + indexArray\n                }\n                else {\n                        certainDay = 0 + indexArray - 2\n                        certainMonth = 3\n                }\n\n                //Loop to go throughout all assigned shifts, and making them into larger blocks in the case one person works\n                //several consecutive shifts\n                dayResult.forEach(({ assigned, shiftTime }, index) => {\n                        assigned.forEach((employee) => {\n                                //Vars to be used in putting multiple shifts into one larger shift block\n                                let noLongerScheduled = false\n                                let iter = 1\n                                let theirStartHour = 0\n                                let theirStartMinute\n                                let theirEndHour\n                                let theirEndMinute\n                                let stillGoing = false\n\n                                //if they are not scheduled the prev hour\n                                if (index === 0) {\n                                        //Loop continuing to look for if a shift for a specific individual has ended\n                                        while (!noLongerScheduled) {\n\n                                                if (index + iter <= dayResult.length - 1 && dayResult[index + iter].assigned.includes(employee)) {\n                                                        console.log('Keep looking')\n                                                        if (iter === 1) {\n                                                                theirStartHour = shiftTime.hour\n                                                                theirStartMinute = shiftTime.minute\n                                                        }\n                                                        stillGoing = true\n                                                }\n                                                else {\n                                                        noLongerScheduled = true\n                                                        theirEndHour = shiftTime.hour + iter\n                                                        theirEndMinute = shiftTime.minute\n                                                }\n                                                iter++\n                                        }\n                                        \n                                        //If else handling the end of a consecutive shift\n                                        if(stillGoing) {\n                                                newObj = { id: employee.empID, title: employee.emp, start: new Date(2020, certainMonth, certainDay, theirStartHour, theirStartMinute, 0), end: new Date(2020, certainMonth, certainDay, theirEndHour, 0, 0) }\n                                        }\n                                        else {\n                                                newObj = { id: employee.empID, title: employee.emp, start: new Date(2020, certainMonth, certainDay, shiftTime.hour, shiftTime.minute, 0), end: new Date(2020, certainMonth, certainDay, theirEndHour, 0, 0) }\n                                        }\n\n                                        dayFinalResult.push(newObj)\n                                }\n                                //Else handing, like before, in the case if shifts for anyone continue for an extended period of time\n                                else if (!dayResult[index - 1].assigned.includes(employee)) {\n                                        while (!noLongerScheduled) {\n\n                                                if (index + iter <= dayResult.length - 1 && dayResult[index + iter].assigned.includes(employee)) {\n                                                        console.log('Keep looking')\n                                                        if (iter === 1) {\n                                                                theirStartHour = shiftTime.hour\n                                                                theirStartMinute = shiftTime.minute\n                                                        }\n                                                        stillGoing = true\n                                                }\n                                                else {\n                                                        noLongerScheduled = true\n                                                        theirEndHour = shiftTime.hour + iter\n                                                        theirEndMinute = shiftTime.minute\n                                                }\n                                                iter++\n                                        }\n                                        \n                                        //If else handling the end of a consecutive shift\n                                        if(stillGoing) {\n                                                newObj = { id: employee.empID, title: employee.emp, start: new Date(2020, certainMonth, certainDay, theirStartHour, theirStartMinute, 0), end: new Date(2020, certainMonth, certainDay, theirEndHour, 0, 0) }\n                                        }\n                                        else {\n                                                newObj = { id: employee.empID, title: employee.emp, start: new Date(2020, certainMonth, certainDay, shiftTime.hour, shiftTime.minute, 0), end: new Date(2020, certainMonth, certainDay, theirEndHour, 0, 0) }\n                                        }\n                                        \n                                        dayFinalResult.push(newObj)\n                                }\n                        })\n                })\n\n                return dayFinalResult\n        }\n\n        //Function handling the iterating process that goes through \n        const autoPopulate = () => {\n                \n                let weekResult = []\n\n                //Loop going through all the days and times provided to auto populate the shifts on the schedule page\n                SCHEDULE.forEach((item, index) => {\n                        weekResult = weekResult.concat(day(item, index))\n                })\n\n                return weekResult\n        }\n\n        //Database query declaration for the get all users query\n        const { loading, error, data, refetch, networkStatus } = useQuery(GetAllUsers)\n\n        //Returned button on the schedule page\n        return <PrimaryButton onClick={() => props.todo(autoPopulate())}>Auto Populate</PrimaryButton>\n}","import { gql } from 'apollo-boost'\r\nimport { UserData } from '../UserDataConstant'\r\n\r\n//API hook for the database mutation UpdateUser\r\nexport const UpdateUser = gql`\r\n    mutation updateUser(\r\n        $id: String!\r\n        $first: String\r\n        $last: String\r\n        $email: String\r\n        $preferences: [UpdateEventInput!]\r\n        $shifts: [UpdateEventInput!]\r\n    ) {\r\n        updateUser(\r\n            _id: $id\r\n            firstName: $first\r\n            lastName: $last\r\n            email: $email\r\n            preferences: $preferences\r\n            shifts: $shifts\r\n        ) { ${UserData} }\r\n            \r\n    }\r\n`\r\n\r\n//API hook for the database mutation CreateUser\r\nexport const CreateUser = gql`\r\n    mutation createUser(\r\n        $firebaseID: String!\r\n        $first: String!\r\n        $last: String!\r\n        $userType: String!\r\n        $email: String!\r\n\r\n    ) {\r\n        createUser(\r\n            firebaseID: $firebaseID\r\n            firstName: $first\r\n            lastName: $last\r\n            userType: $userType\r\n            email: $email\r\n        ) { ${UserData} }\r\n            \r\n    }\r\n`\r\n\r\n//API hook for the database mutation DeleteUser\r\nexport const DeleteUser = gql`\r\n    mutation deleteUser($email: String!) {\r\n        deleteUser(email: $email)\r\n    }\r\n`\r\n\r\n//API hook for the database mutation ClockIn\r\nexport const ClockIn = gql`\r\n    mutation clockIn($location: String!, $time: String!, $email: String!) {\r\n        clockIn(location: $location, time: $time, email: $email)\r\n    }\r\n`\r\n\r\n//API hook for the database mutation ClockOut\r\nexport const ClockOut = gql`\r\n    mutation clockOut($location: String!, $time: String!, $email: String!) {\r\n        clockOut(location: $location, time: $time, email: $email)\r\n    }\r\n`","// Importation of modules, APIs, etc.\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport React, { useEffect, useState, useContext } from 'react'\r\nimport { Views } from 'react-big-calendar'\r\nimport Dropdown from 'react-dropdown'\r\nimport 'react-dropdown/style.css'\r\nimport { UpdateUser } from '../API/Mutations/User'\r\nimport '../Styles/Login.css'\r\nimport '../Styles/Schedule.css'\r\nimport { AuthContext } from './../Components/Auth'\r\n\r\nimport MyCalendar from './../Components/Calendar'\r\n// import styling for the page\r\nimport {\r\n    Card,\r\n    PrimaryButton,\r\n    SubtitleText,\r\n    TextInput,\r\n    TitleText,\r\n} from './../Styles/StyledComponents'\r\n\r\n// styling options\r\nconst options = [\r\n    { value: -100, label: 'In-Class', color: 'darkred' },\r\n    { value: -1, label: 'Unpreferred', color: 'red' },\r\n    { value: 0, label: 'Neutral', color: 'grey' },\r\n    { value: 1, label: 'Preferred', color: 'green' },\r\n]\r\n\r\n// calander which will display the days for the employee\r\nconst DAYS = [\r\n    {\r\n        value: 0,\r\n        label: 'Sunday',\r\n    },\r\n    {\r\n        value: 1,\r\n        label: 'Monday',\r\n    },\r\n    {\r\n        value: 2,\r\n        label: 'Tuesday',\r\n    },\r\n    {\r\n        value: 3,\r\n        label: 'Wednesday',\r\n    },\r\n    {\r\n        value: 4,\r\n        label: 'Thursday',\r\n    },\r\n    {\r\n        value: 5,\r\n        label: 'Friday',\r\n    },\r\n    {\r\n        value: 6,\r\n        label: 'Saturday',\r\n    },\r\n]\r\nlet totalPreferredTime\r\n\r\n// Declaration of all of the usestates\r\nexport default function Account(props) {\r\n    const { user, setUser } = useContext(AuthContext)\r\n    const [userInfo, setUserInfo] = useState(user)\r\n    const [myPreferencesList, setMyPreferencesList] = useState([])\r\n    const [dropdownValue, setDropdownValue] = useState(options[1])\r\n    const [copyFrom, setCopyFrom] = useState('Select')\r\n    const [copyTo, setCopyTo] = useState('Select')\r\n\r\n    // Declaration for the mutation to update user attributes\r\n    const [update, { data, loading }] = useMutation(UpdateUser)\r\n\r\n    //Declaration for the preference list, as well as saving/pushing the preferences to an array\r\n    const reFormatPreferenceList = (prefArray) => {\r\n        let temp = []\r\n        prefArray.forEach(({ title, start, end, color, value }) => {\r\n            let startDate = new Date(start)\r\n            let endDate = new Date(end)\r\n            temp.push({ title, start: startDate, end: endDate, color, value })\r\n        })\r\n        temp.sort(function (a, b) {\r\n            return new Date(a.start) - new Date(b.start)\r\n        })\r\n        setMyPreferencesList(temp)\r\n    }\r\n\r\n    useEffect(() => {\r\n        reFormatPreferenceList(user.preferences)\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        if (!loading && data && data.updateUser) {\r\n            debugger\r\n            setUser(data.updateUser)\r\n        }\r\n    }, [data, loading, setUser])\r\n\r\n    // renders the schedule based on the day format\r\n    const renderPreferenceSchedule = () => {\r\n        let formats = {\r\n            dayFormat: (date, culture, localizer) =>\r\n                localizer.format(date, 'dddd', culture),\r\n        }\r\n        // variable to hold the selected preference\r\n        const handleSelectPreference = ({ start, end }) => {\r\n            let color = 'green'\r\n\r\n            // if statement to change the color of the preference based on the value of the preference\r\n            if (dropdownValue.value == -1) color = 'red'\r\n            else if (dropdownValue.value == 0) color = 'grey'\r\n            else if (dropdownValue.value == -100) color = 'darkred'\r\n\r\n            setMyPreferencesList([\r\n                ...myPreferencesList,\r\n                {\r\n                    title: dropdownValue.label,\r\n                    start,\r\n                    end,\r\n                    color,\r\n                    value: dropdownValue.value.toString(),\r\n                },\r\n            ])\r\n        }\r\n\r\n        //variable to Include copying events to different locations\r\n        const movePreference = ({ event, start, end }) => {\r\n            let { title, color, value } = event\r\n\r\n            // window which will give the user the choice to proceed or decline the copy action\r\n            const check = window.confirm(\r\n                '\\nCopy this event to new day?: Ok - YES, Cancel - NO'\r\n            )\r\n            // if statement to check for the preference and then push to the database\r\n            if (check) {\r\n                setMyPreferencesList([\r\n                    ...myPreferencesList,\r\n                    { title, start, end, color, value },\r\n                ])\r\n            } else {\r\n                let tempArr = myPreferencesList.filter((item) => item !== event)\r\n                tempArr.push({ title, start, end, color, value })\r\n                setMyPreferencesList(tempArr)\r\n            }\r\n        }\r\n\r\n        // Styling and resizing for the preference\r\n        const resizePreference = ({ event, start, end }) => {\r\n            let index = myPreferencesList.indexOf(event)\r\n            let { title, color, value } = event\r\n            let tempArr = [...myPreferencesList]\r\n            tempArr[index] = { title, color, start, end, value }\r\n            setMyPreferencesList(tempArr)\r\n        }\r\n\r\n        // window which will give the user the choice to proceed or decline the delete action\r\n        const handleDeletePreference = (event) => {\r\n            const check = window.confirm(\r\n                '\\nDelete this event: Ok - YES, Cancel - NO'\r\n            )\r\n            // if statement to check for the preference and then delete the selected preference\r\n            if (check) {\r\n                let deleteSpot = myPreferencesList.indexOf(event)\r\n                let tempArray = [...myPreferencesList]\r\n                tempArray.splice(deleteSpot, 1)\r\n                setMyPreferencesList(tempArray)\r\n            }\r\n        }\r\n\r\n        // functions to handle the copied preference\r\n        const renderCopyPreference = () => {\r\n            const handlePreferenceCopy = () => {\r\n                let temp = [...myPreferencesList]\r\n                let startingDate\r\n                let endingDate\r\n                //3,4,5,6\r\n                if (copyTo.value > 2) {\r\n                    startingDate = `April ${copyTo.value - 2}`\r\n                    endingDate = `April ${copyTo.value - 2}`\r\n                } else {\r\n                    startingDate = `March ${29 + copyTo.value}`\r\n                    endingDate = `March ${29 + copyTo.value}`\r\n                }\r\n\r\n                if (\r\n                    copyFrom !== 'Select' ||\r\n                    copyTo !== 'Select' ||\r\n                    copyTo.value !== copyFrom.value\r\n                ) {\r\n                    // loop to take in each preference on the board and push them to the database\r\n                    myPreferencesList.forEach(\r\n                        ({ start, title, end, color, value }) => {\r\n                            if (start.getDay() === copyFrom.value) {\r\n                                let newStart = new Date(\r\n                                    `${startingDate}, 2020 ${start.getHours()}:${start.getMinutes()}:${start.getSeconds()}`\r\n                                )\r\n                                let newEnd = new Date(\r\n                                    `${endingDate}, 2020 ${end.getHours()}:${end.getMinutes()}:${end.getSeconds()}`\r\n                                )\r\n                                temp.push({\r\n                                    title: title,\r\n                                    start: newStart,\r\n                                    end: newEnd,\r\n                                    color: color,\r\n                                    value: value,\r\n                                })\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n                setMyPreferencesList(temp)\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <TitleText\r\n                        //styling for the preferences tag\r\n                        style={{\r\n                            fontSize: '3rem',\r\n                            textAlign: 'left',\r\n                        }}\r\n                    >\r\n                        Preferences\r\n                    </TitleText>\r\n                    <PrimaryButton\r\n                        // button to log the state of the preferences\r\n                        style={{\r\n                            align: 'left',\r\n                        }}\r\n                        onClick={() => console.log(myPreferencesList)}\r\n                    >\r\n                        Log State\r\n                    </PrimaryButton>\r\n                    <PrimaryButton\r\n                        // button to handle copying the preferences\r\n                        style={{\r\n                            align: 'left',\r\n                        }}\r\n                        onClick={() => handlePreferenceCopy()}\r\n                    >\r\n                        Copy\r\n                    </PrimaryButton>\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'space-evenly',\r\n                        }}\r\n                    >\r\n                        <Dropdown\r\n                            // dropdown list to choose an option for the preferences for the beginning of the shift\r\n                            options={options}\r\n                            onChange={(x) => setDropdownValue(x)}\r\n                            value={dropdownValue}\r\n                            placeholder='Select an option'\r\n                        />\r\n                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                            <SubtitleText>From</SubtitleText>\r\n                            <Dropdown\r\n                                // dropdown list to choose an option for the preferences for the end of the shift\r\n                                options={DAYS}\r\n                                onChange={(x) => setCopyFrom(x)}\r\n                                value={copyFrom}\r\n                                placeholder='Select an option'\r\n                            />\r\n                        </div>\r\n                        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                            <SubtitleText>To</SubtitleText>\r\n                            <Dropdown\r\n                                options={DAYS}\r\n                                onChange={(x) => setCopyTo(x)}\r\n                                value={copyTo}\r\n                                placeholder='Select an option'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        // function to get the total number of hours the employee has so they hit their weekly max on preferences\r\n        const getTotalPreferredHours = () => {\r\n            totalPreferredTime = 0\r\n            myPreferencesList.forEach(({ value, start, end }) => {\r\n                if (value === '1') {\r\n                    let startDate = new Date(start)\r\n                    let endDate = new Date(end)\r\n                    let timeDifference =\r\n                        endDate.getHours() +\r\n                        endDate.getMinutes() / 60 -\r\n                        (startDate.getHours() + startDate.getMinutes() / 60)\r\n                    totalPreferredTime += timeDifference\r\n                }\r\n            })\r\n            return totalPreferredTime\r\n        }\r\n        return (\r\n            <div>\r\n                {renderCopyPreference()}\r\n                <PrimaryButton\r\n                    // button to call the function to submit all of the preferences to the database\r\n                    style={{\r\n                        //clear:'left',\r\n                        align: 'left',\r\n                    }}\r\n                    onClick={(e) =>\r\n                        totalPreferredTime >= 30 &&\r\n                        update({\r\n                            variables: {\r\n                                id: user._id,\r\n                                preferences: myPreferencesList.sort(function (\r\n                                    a,\r\n                                    b\r\n                                ) {\r\n                                    return new Date(a.start) - new Date(b.start)\r\n                                }),\r\n                            },\r\n                        })\r\n                    }\r\n                >\r\n                    Submit To Database\r\n                </PrimaryButton>\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                ></div>\r\n\r\n                <MyCalendar\r\n                    //Preferences calendar\r\n                    defaultDate={new Date(2020, 2, 29)}\r\n                    toolbar={false}\r\n                    formats={formats}\r\n                    events={myPreferencesList}\r\n                    view={Views.WEEK}\r\n                    onSelectEvent={handleDeletePreference}\r\n                    onSelectSlot={handleSelectPreference}\r\n                    draggableAccessor={(event) => true}\r\n                    onEventDrop={movePreference}\r\n                    onEventResize={resizePreference}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    const renderRow = (state, placeholder) => {\r\n        const onChange = (value) => {\r\n            let temp = { ...userInfo }\r\n            temp[state] = value\r\n            setUserInfo(temp)\r\n        }\r\n        return (\r\n            <TextInput\r\n                placeholder={placeholder}\r\n                type='text'\r\n                value={userInfo[state]}\r\n                borderColor={userInfo[state] === '' && 'red'}\r\n                onChange={(e) => onChange(e.target.value)}\r\n            />\r\n        )\r\n    }\r\n    // function to update the various attributes of the employee in the database\r\n    const validation = ({ email, firstName, lastName }) => {\r\n        if (email === '' || firstName === '' || lastName === '')\r\n            console.log('Bad Update')\r\n        else {\r\n            update({\r\n                variables: {\r\n                    id: user._id,\r\n                    first: firstName,\r\n                    last: lastName,\r\n                    email: email,\r\n                },\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <Card\r\n            style={{\r\n                width: '95%',\r\n            }}\r\n        >\r\n            <div>\r\n                <TitleText\r\n                    style={{\r\n                        textAlign: 'left',\r\n                        position: 'flex',\r\n                        fontSize: '3rem',\r\n                    }}\r\n                >\r\n                    Account Information\r\n                </TitleText>\r\n                {/* <h1\r\n                    style={{\r\n                        textAlign: 'left',\r\n                    }}\r\n                >\r\n                    {user.firstName}\r\n                </h1> */}\r\n                <SubtitleText>Here you can update your account information.</SubtitleText>\r\n                <br />\r\n                {/* {renderRow('email', 'Email')} */}\r\n                {renderRow('firstName', 'First Name')}\r\n                {renderRow('lastName', 'Last Name')}\r\n                <PrimaryButton\r\n                    // button to save the changes made to the employees account and pusht hem to the database\r\n                    style={{\r\n                        display: 'block',\r\n                    }}\r\n                    onClick={() => validation(userInfo)}\r\n                >\r\n                    Save\r\n                </PrimaryButton>\r\n                {renderPreferenceSchedule()}\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n","import * as firebase from 'firebase/app'\nimport 'firebase/auth'\nconst fb = firebase.initializeApp({\n    apiKey: process.env.REACT_APP_apiKey,\n    authDomain: process.env.REACT_APP_authDomain,\n    databaseURL: process.env.REACT_APP_databaseURL,\n    projectId: process.env.REACT_APP_projectId,\n    storageBucket: process.env.REACT_APP_storageBucket,\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\n})\n\nexport default fb\n","import React, { useState } from 'react'\r\nimport Form from 'react-bootstrap/Form'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport { Icon, Input } from 'semantic-ui-react'\r\nexport default function UsernameInput(props) {\r\n    const {\r\n        containerStyle = { flexDirection: 'column', display: 'flex' },\r\n        onChange = (value) => console.log(value),\r\n        value = '',\r\n    } = props\r\n\r\n    const [appendEmail, setAppendEmail] = useState('@islander.tamucc.edu')\r\n\r\n    const handleTextChanged = (text) => {\r\n        if (text.includes('@') && appendEmail !== '') {\r\n            setAppendEmail('')\r\n        } else if (\r\n            !text.includes('@') &&\r\n            appendEmail !== '@islander.tamucc.edu'\r\n        ) {\r\n            setAppendEmail('@islander.tamucc.edu')\r\n        }\r\n        onChange(text)\r\n    }\r\n\r\n    return (\r\n        <Form.Group style={containerStyle}>\r\n            <Form.Label>Email</Form.Label>\r\n            <div style={{ display: 'contents' }}>\r\n                <Input\r\n                    icon='user outline'\r\n                    iconPosition='left'\r\n                    onChange={({ target: { value } }) =>\r\n                        handleTextChanged(value)\r\n                    }\r\n                    placeholder='Email...'\r\n                    aria-label='Email'\r\n                    autoComplete='username'\r\n                    type='text'\r\n                    value={value}\r\n                />\r\n                {appendEmail.length > 0 && (\r\n                    <InputGroup.Append>\r\n                        <InputGroup.Text>{appendEmail}</InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                )}\r\n            </div>\r\n            <Form.Text className='text-muted'>\r\n                We will never share this email with anyone else.\r\n            </Form.Text>\r\n        </Form.Group>\r\n        // <Form.Group\r\n        //     // as={as}\r\n        //     style={{ flexDirectoin: 'column', display: 'flex' }}\r\n        // >\r\n        //     <Form.Label>Username</Form.Label>\r\n        //     <InputGroup style={containerStyle}>\r\n        //         <Input\r\n        //             icon='user outline'\r\n        //             iconPosition='left'\r\n        //             onChange={({ target: { value } }) =>\r\n        //                 handleTextChanged(value)\r\n        //             }\r\n        //             placeholder='Username...'\r\n        //             aria-label='Username'\r\n        //             style={style}\r\n        //             autoComplete='username'\r\n        //             type='text'\r\n        //         />\r\n        //         {appendEmail.length > 0 && (\r\n        //             <InputGroup.Append>\r\n        //                 <InputGroup.Text>{appendEmail}</InputGroup.Text>\r\n        //             </InputGroup.Append>\r\n        //         )}\r\n        //     </InputGroup>\r\n        //     <Form.Text className='text-muted'>\r\n        //         We'll never share this email with anyone else.\r\n        //     </Form.Text>\r\n        // </Form.Group>\r\n    )\r\n}\r\n","import Overview from './Screens/Overview'\nimport Shiftswap from './Screens/Shiftswap'\nimport Statistics from './Screens/Statistics'\nimport Schedule from './Screens/Schedule'\nimport Account from './Screens/Account'\nimport Admin from './Screens/Admin'\nimport Logout from './Screens/Logout'\n// All screens here will become a navbar item and a route\nconst Screens = [\n    {\n        name: 'Overview',\n        path: '/overview',\n        component: Overview,\n    },\n    {\n        name: 'Shift Swap',\n        path: '/shiftswap',\n        component: Shiftswap,\n    },\n    {\n        name: 'Statistics',\n        path: '/statistics',\n        component: Statistics,\n    },\n    {\n        name: 'Schedule',\n        path: '/schedule',\n        component: Schedule,\n    },\n    {\n        name: 'Account',\n        path: '/account',\n        component: Account,\n    },\n    {\n        name: 'Admin',\n        path: '/Admin',\n        component: Admin,\n    },\n    {\n        name: 'Logout',\n        path: '/logout',\n        component: Logout,\n    },\n]\nexport default Screens\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useMutation, useLazyQuery } from '@apollo/react-hooks'\r\nimport {\r\n    RemoveTradeBoardShift,\r\n    AddPendingShift,\r\n    AcceptPendingShift,\r\n    DeclinePendingShift,\r\n} from '../API/Mutations/Shifts'\r\nimport { Card, TitleText, PrimaryButton,SubtitleText } from './../Styles/StyledComponents'\r\nimport { GetTradeBoardShifts, GetPendingShifts } from '../API/Queries/Shifts'\r\nimport { AuthContext } from './../Components/Auth'\r\nimport { SuccessAlert, ErrorAlert } from './../Components/Alerts'\r\nimport LoadingSpinner from './../Components/LoadingSpinner'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport Button from 'react-bootstrap/Button'\r\nimport MyCalendar from './../Components/Calendar'\r\n\r\nexport default function Shiftswap() {\r\n    const [tradeBoardShifts, setTradeBoardShifts] = useState([])\r\n    const [pendingApprovalShifts, setPendingApprovalShifts] = useState([])\r\n    const [error, setError] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [success, setSuccess] = useState(false)\r\n    const [information, setInformation] = useState(false)\r\n    const [selectedEvent, setSelectedEvent] = useState(false)\r\n    const { user } = useContext(AuthContext)\r\n\r\n    // Function to get the trade board shifts, called for an employee\r\n    const [getTradeBoardShifts, { loading: loadingTradeBoard }] = useLazyQuery(\r\n        GetTradeBoardShifts,\r\n        {\r\n            onCompleted({ getTradeBoardShifts }) {\r\n                console.log({ getTradeBoardShifts })\r\n\r\n                const formattedShifts = getTradeBoardShifts.map((shift) => {\r\n                    const { start, end } = shift\r\n                    let startDate = new Date(start)\r\n                    let endDate = new Date(end)\r\n                    return { ...shift, start: startDate, end: endDate }\r\n                })\r\n                console.log({ formattedShifts })\r\n\r\n                setTradeBoardShifts(formattedShifts)\r\n            },\r\n            onError({ message }) {\r\n                setError({\r\n                    title: 'Unable To Load Trade Board Shifts!',\r\n                    message,\r\n                })\r\n            },\r\n        }\r\n    )\r\n\r\n    // Function to get pending shifts, used for admin\r\n    const [getPendingShifts, { loading: loadingPending }] = useLazyQuery(\r\n        GetPendingShifts,\r\n        {\r\n            onCompleted({ getPendingShifts }) {\r\n                const formattedShifts = getPendingShifts.map((shift) => {\r\n                    const { start, end } = shift\r\n                    let startDate = new Date(start)\r\n                    let endDate = new Date(end)\r\n                    return { ...shift, start: startDate, end: endDate }\r\n                })\r\n                setPendingApprovalShifts(formattedShifts)\r\n            },\r\n            onError({ message }) {\r\n                setError({\r\n                    title: 'Error Loading Pending Shifts To Swap!',\r\n                    message,\r\n                })\r\n            },\r\n        }\r\n    )\r\n\r\n    // Function to remove a trade board shift, used for employee\r\n    const [\r\n        removeTradeBoardShift,\r\n        { loading: removeTradeBoardShiftLoading },\r\n    ] = useMutation(RemoveTradeBoardShift, {\r\n        onError({ message }) {\r\n            setError({ title: 'Error Removing Shift!', message })\r\n        },\r\n        onCompleted({ removeTradeBoardShift }) {\r\n            if (removeTradeBoardShift) {\r\n                const temp = [...tradeBoardShifts]\r\n                temp.splice(\r\n                    temp.findIndex(({ _id }) => removeTradeBoardShift == _id),\r\n                    1\r\n                )\r\n                setTradeBoardShifts(temp)\r\n            }\r\n        },\r\n    })\r\n\r\n    // Function to add a pending shift, used for employee\r\n    const [addPendingShift, { loading: addPendingShiftLoading }] = useMutation(\r\n        AddPendingShift,\r\n        {\r\n            onError({ message }) {\r\n                setError({ title: 'Error Adding Shift!', message })\r\n            },\r\n        }\r\n    )\r\n\r\n    // Function to accept a pending shift, used for admin\r\n    const [\r\n        acceptPendingShift,\r\n        { loading: acceptPendingShiftLoading },\r\n    ] = useMutation(AcceptPendingShift, {\r\n        onError({ message }) {\r\n            setError({ title: 'Error Accepting Shift Swap!', message })\r\n        },\r\n        onCompleted({ acceptPendingShift }) {\r\n            if (acceptPendingShift) {\r\n                const temp = [...acceptPendingShift]\r\n                temp.splice(\r\n                    temp.findIndex(({ _id }) => acceptPendingShift == _id),\r\n                    1\r\n                )\r\n                setPendingApprovalShifts(temp)\r\n            }\r\n        },\r\n    })\r\n\r\n    // Function to decline a pending shift, used for admin\r\n    const [\r\n        declinePendingShift,\r\n        { loading: declinePendingShiftLoading },\r\n    ] = useMutation(DeclinePendingShift, {\r\n        onError({ message }) {\r\n            setError({ title: 'Error Declining Shift Swap!', message })\r\n        },\r\n        onCompleted({ declinePendingShift }) {\r\n            if (declinePendingShift) {\r\n                const temp = [...declinePendingShift]\r\n                temp.splice(\r\n                    temp.findIndex(({ _id }) => declinePendingShift == _id),\r\n                    1\r\n                )\r\n                setPendingApprovalShifts(temp)\r\n            }\r\n        },\r\n    })\r\n\r\n    // When the screen loads, make the correct database call based on userType\r\n    useEffect(() => {\r\n        if (user.userType === 'Admin') getPendingShifts()\r\n        else if (user.userType === 'Employee') getTradeBoardShifts()\r\n    }, [getPendingShifts, getTradeBoardShifts, user])\r\n\r\n    // If anything is loading, set it as loading\r\n    // If anything is not loading, set it as not loading\r\n    useEffect(() => {\r\n        if (\r\n            loadingTradeBoard ||\r\n            loadingPending ||\r\n            removeTradeBoardShiftLoading ||\r\n            addPendingShiftLoading ||\r\n            acceptPendingShiftLoading ||\r\n            declinePendingShiftLoading\r\n        )\r\n            setLoading(true)\r\n        else setLoading(false)\r\n    }, [\r\n        loadingTradeBoard,\r\n        loadingPending,\r\n        removeTradeBoardShiftLoading,\r\n        addPendingShiftLoading,\r\n        acceptPendingShiftLoading,\r\n        declinePendingShiftLoading,\r\n    ])\r\n\r\n    // If the event is clicked, set the information popup accordingly\r\n    useEffect(() => {\r\n        if (selectedEvent && !information) {\r\n            if (user.userType === 'Admin')\r\n                setInformation({\r\n                    title: 'Confirm Shift Swap',\r\n                    message: 'Do you approve of this shift being picked up?',\r\n                })\r\n            else\r\n                setInformation({\r\n                    title: 'Pick Up Shift',\r\n                    message: 'Do you want to pickup this shift?',\r\n                })\r\n        }\r\n    }, [information, selectedEvent, user.userType])\r\n\r\n    // Function to render the correct calendar based on userType\r\n    const renderCalendar = () => {\r\n        let events = []\r\n        if (user.userType === 'Admin') events = pendingApprovalShifts\r\n        else if (user.userType === 'Employee') events = tradeBoardShifts\r\n        return (\r\n            <MyCalendar\r\n                events={events}\r\n                onSelectEvent={(event) => setSelectedEvent(event)}\r\n            />\r\n        )\r\n    }\r\n\r\n    const handlePickupTradeBoard = () => {\r\n        addPendingShift({\r\n            variables: {\r\n                toUserID: user._id,\r\n                fromUserID: selectedEvent.full_user._id,\r\n                shiftID: selectedEvent._id,\r\n            },\r\n        })\r\n        setInformation(false)\r\n        setSelectedEvent(false)\r\n    }\r\n\r\n    const handleRemoveTradeBoard = () => {\r\n        removeTradeBoardShift({\r\n            variables: { shiftID: selectedEvent._id, userID: user._id },\r\n        })\r\n        setInformation(false)\r\n        setSelectedEvent(false)\r\n    }\r\n\r\n    const handleApprovePending = () => {\r\n        console.log(selectedEvent)\r\n\r\n        acceptPendingShift({ variables: { shiftID: selectedEvent._id } })\r\n        setInformation(false)\r\n        setSelectedEvent(false)\r\n    }\r\n\r\n    const handleDeclinePending = () => {\r\n        declinePendingShift({ variables: { shiftID: selectedEvent._id } })\r\n        setInformation(false)\r\n        setSelectedEvent(false)\r\n    }\r\n\r\n    const renderInformativeAlert = () => {\r\n        let onAccept\r\n        let onDecline\r\n        if (user.userType === 'Admin') {\r\n            onAccept = handleApprovePending\r\n            onDecline = handleDeclinePending\r\n        } else if (user.userType === 'Employee') {\r\n            onAccept = handlePickupTradeBoard\r\n            onDecline = handleRemoveTradeBoard\r\n        }\r\n        return (\r\n            <Alert\r\n                style={{ position: 'absolute', top: '3vh', right: '40vw' }}\r\n                variant='info'\r\n                onClose={() => {\r\n                    setInformation(false)\r\n                    setSelectedEvent(false)\r\n                }}\r\n                dismissible\r\n            >\r\n                <Alert.Heading>{information.title}</Alert.Heading>\r\n                <p>{information.message}</p>\r\n                <hr />\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        fliexDirection: 'row',\r\n                        justifyContent: 'space-around',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Button\r\n                        onClick={onAccept}\r\n                        variant='outline-success'\r\n                        style={{\r\n                            height: '4.1vh',\r\n                            width: '30%',\r\n                            marginRight: '5%',\r\n                        }}\r\n                    >\r\n                        Approve\r\n                    </Button>\r\n                    <Button\r\n                        onClick={onDecline}\r\n                        variant='outline-danger'\r\n                        style={{ height: '4vh', width: '30%' }}\r\n                    >\r\n                        Disapprove\r\n                    </Button>\r\n                    <PrimaryButton\r\n                        onClick={() => {\r\n                            setInformation(false)\r\n                            setSelectedEvent(false)\r\n                        }}\r\n                    >\r\n                        Cancel\r\n                    </PrimaryButton>\r\n                </div>\r\n            </Alert>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card style={{ width: '95%' }}>\r\n            <div>\r\n                <TitleText\r\n                    style={{\r\n                        textAlign: 'left',\r\n                        position: 'flex',\r\n                        fontSize: '3.2rem',\r\n                    }}\r\n                >Shiftswap</TitleText>\r\n\t\t\t\t<SubtitleText>Make requests to exchange shifts with other employees. </SubtitleText>\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n                {success && (\r\n                    <SuccessAlert\r\n                        message={success}\r\n                        onClose={() => setSuccess(false)}\r\n                    />\r\n                )}\r\n                {error && (\r\n                    <ErrorAlert error={error} onClose={() => setError(false)} />\r\n                )}\r\n\r\n                {loading ? <LoadingSpinner /> : renderCalendar()}\r\n                {information && renderInformativeAlert()}\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {\r\n    Card,\r\n    CardTitle,\r\n    Hyperlink,\r\n    PrimaryButton,\r\n    SubtitleText,\r\n    TextInput,\r\n    TitleText,\r\n} from './../Styles/StyledComponents'\r\n\r\nexport default function Statistics(props) {\r\n\treturn (\r\n\t\t<div style={{\r\n                    textAlign: 'center',\r\n                    position: 'flex',\r\n                }}>\r\n\t\t\t<TitleText style={{ \r\n                    fontSize: '48px',\r\n                }}>Statistics</TitleText>\r\n\t\t\t<SubtitleText>Statistics content is under construction.</SubtitleText>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import { useMutation, useQuery } from '@apollo/react-hooks'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\n\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { UpdateUsersShifts } from '../API/Mutations/Shifts'\r\nimport '../Styles/Schedule.css'\r\nimport { CreateBlackout } from './../API/Mutations/Blackout'\r\nimport { GetBlackouts } from './../API/Queries/Blackout'\r\nimport { GetAllUsersId, GetUserByID } from './../API/Queries/User'\r\nimport { AuthContext } from './../Components/Auth'\r\nimport AutoPopulate from './../Functions/AutoPopulation'\r\nimport { Card, PrimaryButton, TitleText, SubtitleText } from './../Styles/StyledComponents'\r\nimport Form from 'react-bootstrap/Form'\r\nimport MyCalendar from './../Components/Calendar'\r\n\r\nexport default function Schedule(props) {\r\n    //State variables\r\n    const [myEventsList, setMyEventsList] = useState([])\r\n    const [colorPicked, setColorPicked] = useState('red')\r\n    const [displayColorPicker, setDisplayColorPicker] = useState(false)\r\n    const [blackoutStart, setBlackoutStart] = useState('')\r\n    const [blackoutEnd, setBlackoutEnd] = useState('')\r\n    const [AutoPopulationSchedule, setAutoPopulationSchedule] = useState([])\r\n    const [blackoutDates, setBlackoutDates] = useState([])\r\n    const [weeklyMax, setWeeklyMax] = useState(localStorage.getItem('currentWeeklyMax') || 0)\r\n    const [dailyMax, setDailyMax] = useState(localStorage.getItem('currentDailyMax') || 0)\r\n\r\n    //Context var to allow for ease in access to current user info\r\n    const { user } = useContext(AuthContext)\r\n\r\n    //Database mutation declarations, for the create blackout and update user shifts mutations\r\n    const [addBlackout] = useMutation(CreateBlackout)\r\n    const [updateShifts] = useMutation(UpdateUsersShifts)\r\n\r\n    //Database query declaration for the get user by ID query\r\n    const { loading, error, data: userData, refetch, networkStatus } = useQuery(\r\n        GetUserByID,\r\n        {\r\n            variables: { id: user._id },\r\n            notifyOnNetworkStatusChange: true,\r\n        }\r\n    )\r\n\r\n    //Database query declaration for the get all users by ID query\r\n    const {\r\n        loading: loading2,\r\n        error: error2,\r\n        data: multipleUserData,\r\n        refetch: refetch2,\r\n        networkStatus: netStat2,\r\n    } = useQuery(GetAllUsersId)\r\n\r\n    //Database query declaration for the get all blackouts query\r\n    const {\r\n        loading: loading3,\r\n        error: error3,\r\n        data: data3,\r\n        refetch: refetch3,\r\n        networkStatus: netStat3,\r\n    } = useQuery(GetBlackouts)\r\n\r\n    //useEffect => what to do after the components are rendered\r\n    useEffect(() => {\r\n        //Setup example setMyEventsList list\r\n        setMyEventsList([\r\n            {\r\n                title: 'EXAMPLE Employee 1',\r\n                start: new Date(2020, 1, 23, 5),\r\n                end: new Date(2020, 1, 23, 18),\r\n                color: '#fc0373',\r\n            },\r\n            {\r\n                title: 'EXAMPLE Employee 3',\r\n                start: new Date(2020, 1, 25, 10),\r\n                end: new Date(2020, 1, 25, 16),\r\n                color: '#18fc03',\r\n            },\r\n        ])\r\n\r\n        //On completed function, essentially checking for that of the correct loading of the blackout dates into the file\r\n        const onCompleted = (data3) => {\r\n            let temp = []\r\n            //console.log('GOT HERE')\r\n            data3.getBlackouts.forEach(({ start, end }) => {\r\n                let startDate = new Date(start)\r\n                let endDate = new Date(end)\r\n                //console.log(startDate, '\\n', endDate)\r\n                temp.push({ start: startDate, end: endDate })\r\n                //console.log(temp)\r\n            })\r\n            //console.log(temp)\r\n            setBlackoutDates(temp)\r\n            //console.log(blackoutDates)\r\n        }\r\n\r\n        //Call for onComplete function given certain data\r\n        if (!loading3 && !error3) onCompleted(data3)\r\n    }, [loading3, data3, error3])\r\n\r\n    //Calendar function that handles that of the creation of new calendar events\r\n    const handleSelect = ({ start, end }) => {\r\n        const title = window.prompt('New Event name')\r\n        if (title)\r\n            setMyEventsList([\r\n                ...myEventsList,\r\n                { title, start, end, color: colorPicked && colorPicked.hex },\r\n            ])\r\n    }\r\n\r\n    //Handles color changes using our color changer (MAY DELETE)\r\n    const handleColorChangeComplete = (color, event) =>\r\n        setColorPicked(color, () => setDisplayColorPicker(!displayColorPicker))\r\n\r\n    //Establishes base event\r\n    const Event = ({ event }) => {\r\n        return <p style={{ color: 'yellow' }}>{event.title}</p>\r\n    }\r\n\r\n    //Calendar function that handles the movement of calendar events\r\n    const moveEvent = ({ event, start, end }) => {\r\n        let { title, color } = event\r\n        let tempArr = myEventsList.filter((item) => item !== event)\r\n        tempArr.push({ title, start, end, color })\r\n        setMyEventsList(tempArr)\r\n    }\r\n\r\n    //Calendar function that handles the resizing of calendar events\r\n    const resizeEvent = ({ event, start, end }) => {\r\n        let index = myEventsList.indexOf(event)\r\n        let { title, color } = event\r\n        let tempArr = [...myEventsList]\r\n        tempArr[index] = { title, color, start, end }\r\n        setMyEventsList(tempArr)\r\n    }\r\n\r\n    //Calendar function that handles the deletion of calendar events\r\n    const handleDelete = (event) => {\r\n        const check = window.confirm(\r\n            '\\nDelete this event: Ok - YES, Cancel - NO'\r\n        )\r\n        if (check) {\r\n            let deleteSpot = myEventsList.indexOf(event)\r\n            let tempArray = [...myEventsList]\r\n            tempArray.splice(deleteSpot, 1)\r\n            setMyEventsList(tempArray)\r\n        }\r\n    }\r\n\r\n    //Handles the coloring of blackout days\r\n    const handleBlackoutDate = (date) => {\r\n        //Loop going through all potential blackout dates\r\n        for (let i in blackoutDates) {\r\n            //Gets our start and end of any particular blackout range\r\n            let blackoutStartDate = blackoutDates[i].start\r\n            let blackoutStartDate2 = blackoutDates[i].end\r\n\r\n            //Function adding day object time\r\n            Date.prototype.addDays = function (days) {\r\n                var date = new Date(this.valueOf())\r\n                date.setDate(date.getDate() + days)\r\n                return date\r\n            }\r\n\r\n            //Function finding all the days inbetween the beginning and end of the stated blackout range\r\n            function getDates(startDate, stopDate) {\r\n                var dateArray = new Array()\r\n                var currentDate = startDate\r\n                while (currentDate <= stopDate) {\r\n                    dateArray.push(new Date(currentDate))\r\n                    currentDate = currentDate.addDays(1)\r\n                }\r\n                return dateArray\r\n            }\r\n\r\n            //Array containing all the blackout days in a given blackout range\r\n            let arr = getDates(blackoutStartDate, blackoutStartDate2)\r\n\r\n            //Function going through all of the blackout days in a given range and making the their cells in the calendar\r\n            //blacked out\r\n            for (let x in arr) {\r\n                if (\r\n                    date.getDate() === arr[x].getDate() &&\r\n                    date.getMonth() === arr[x].getMonth() &&\r\n                    date.getFullYear() === arr[x].getFullYear()\r\n                ) {\r\n                    return {\r\n                        style: {\r\n                            backgroundColor: '#000',\r\n                        },\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Handles the rendering of any given blackout\r\n    const renderBlackout = () => {\r\n        //Function rendering our chosen date picker, and then using said dates for blackout day selection\r\n        const renderDatePicker = (statename, functionName) => {\r\n            return (\r\n                <DatePicker\r\n                    selected={statename}\r\n                    onSelect={(date) => functionName(date)}\r\n                    minDate={statename === blackoutEnd && blackoutStart}\r\n                    maxDate={statename === blackoutStart && blackoutEnd}\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    alignItems: 'left',\r\n                    flexDirection: 'column',\r\n                    justifyContent: 'center',\r\n                }}\r\n            >\r\n                <div style={{ display: 'flex',justifyContent: 'center' }}>\r\n                    <h4>Blackout Start <br /> {renderDatePicker(blackoutStart, setBlackoutStart)}</h4>\r\n                    \r\n                    \r\n                    <h4>Blackout End <br /> {renderDatePicker(blackoutEnd, setBlackoutEnd)}</h4>\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    //Database checking things\r\n    if (loading) return <p>Loading...</p>\r\n    if (error) return <p>Error :( {JSON.stringify(error)}</p>\r\n    if (networkStatus === 4) return <p>Refetching...</p>\r\n\r\n    //Function handling the sending of shifts to the database\r\n    const sendAutoPopulatedShiftsToDB = () => {\r\n        const formattedForDB = {}\r\n\r\n        //Loop going through all auto populated shifts\r\n        AutoPopulationSchedule.forEach((shift) => {\r\n            const { id, ...rest } = shift\r\n            let nextWeek\r\n            const allShifts = []\r\n            let currentWeek = 0\r\n            const numberOfWeeks = 50\r\n\r\n            //This loop goes through, and adds additional shifts based off of our 20 week work period\r\n            while (currentWeek < numberOfWeeks) {\r\n                nextWeek = { ...rest }\r\n                nextWeek.start = new Date(shift.start)\r\n                nextWeek.end = new Date(shift.end)\r\n                nextWeek.start.setDate(\r\n                    nextWeek.start.getDate() + currentWeek * 7\r\n                )\r\n                nextWeek.end.setDate(nextWeek.end.getDate() + currentWeek * 7)\r\n                nextWeek.start = nextWeek.start.toISOString()\r\n                nextWeek.end = nextWeek.end.toISOString()\r\n                nextWeek.color = 'blue'\r\n                allShifts.push(nextWeek)\r\n                currentWeek++\r\n            }\r\n\r\n            //This if else statement goes in and formats auto populated and added shifts for sending to the database\r\n            if (id in formattedForDB) {\r\n                formattedForDB[id].shifts = formattedForDB[id].shifts.concat(\r\n                    allShifts\r\n                )\r\n            } else {\r\n                formattedForDB[id] = {}\r\n                formattedForDB[id]._id = id\r\n                formattedForDB[id].shifts = [...allShifts]\r\n            }\r\n        })\r\n\r\n        //This takes in all shifts formatted for the database\r\n        const myVar = Object.values(formattedForDB)\r\n\r\n        //This sends all shifts to the database in one go\r\n        updateShifts({ variables: { users: myVar } })\r\n    }\r\n\r\n    //Function handling the sending of selected blackout date range to the database\r\n    const sendBlackOutToDB = () => {\r\n        //Sends current blackout range to the database\r\n        addBlackout({\r\n            variables: {\r\n                start: blackoutStart.toISOString(),\r\n                end: blackoutEnd.toISOString(),\r\n            },\r\n        })\r\n    }\r\n\r\n    //Handles the rendering and actions of the adjust weekly and daily max hours local storage vars\r\n    const renderHoursButton = () => {\r\n        //Function ensuring the safe adjustment of our targeted variables\r\n        const validation = () => {\r\n            localStorage.setItem('currentWeeklyMax', weeklyMax)\r\n            localStorage.setItem('currentDailyMax', dailyMax)\r\n        }\r\n        return (\r\n            <PrimaryButton onClick={() => validation()}>\r\n                Adjust Hour Maxes\r\n            </PrimaryButton>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                width: '95%',\r\n            }}\r\n        >\r\n            <div>\r\n            <TitleText style={{\r\n                    textAlign: 'left',\r\n                    position: 'flex',\r\n                    fontSize: '3.2rem'\r\n                }}>Schedule</TitleText>\r\n                <SubtitleText> View both the Blackout Calendar and Create Auto-Populated Calendars. </SubtitleText>\r\n                <br />\r\n                <br />\r\n                <h3>Blackout Calendar</h3>\r\n                <SubtitleText> Here you may set new Blackout dates to the Calendar.</SubtitleText>\r\n                <br />\r\n                <br />\r\n                {/* <Swatch\r\n                    onClick={() => setDisplayColorPicker(!displayColorPicker)}\r\n                >\r\n                    <Color color={colorPicked.hex} />\r\n                    {displayColorPicker && (\r\n                        <HuePicker\r\n                            color={colorPicked}\r\n                            onChange={handleColorChangeComplete}\r\n                        />\r\n                    )}\r\n                </Swatch> */}\r\n                {renderBlackout()}\r\n\r\n                <div style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            alignItems: 'center',\r\n                        }}>\r\n                    <PrimaryButton\r\n                        style={{\r\n                            align: 'left',\r\n                        }}\r\n                        onClick={(e) => sendBlackOutToDB()}\r\n                    >\r\n                        Submit Blackouts To Database\r\n                    </PrimaryButton>\r\n                </div>\r\n\r\n                <MyCalendar\r\n                    events={myEventsList}\r\n                    dayPropGetter={handleBlackoutDate}\r\n                    eventPropGetter={(event) => ({\r\n                        style: {\r\n                            backgroundColor: event.color,\r\n                            alignSelf: 'center',\r\n                            alignContent: 'center',\r\n                        },\r\n                    })}\r\n                    onEventDrop={moveEvent}\r\n                    onEventResize={resizeEvent}\r\n                />\r\n\r\n                {/* <AutoPopulate todo={(fromChild) => reformatAutoPop(fromChild)} /> */}\r\n                <br />\r\n                <br />\r\n                <h3>Auto Population Calendar</h3>\r\n                <SubtitleText>Generate new work Calendars with the Auto Population feature.</SubtitleText>\r\n                <br />\r\n                <br />\r\n                <h2>Hours</h2>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label sm={2}>Weekly Max</Form.Label>\r\n                        <Form.Control  type='text' placeholder='Weekly Max' defaultValue = {weeklyMax} onChange={({ target: { value } }) =>\r\n                                setWeeklyMax(value)\r\n                            }  />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Daily Max</Form.Label>\r\n                        <Form.Control type='text' placeholder='Daily Max' defaultValue = {dailyMax} onChange={({ target: { value } }) =>\r\n                                setDailyMax(value)\r\n                            } />\r\n                    </Form.Group>\r\n                    {renderHoursButton()}\r\n                </Form>\r\n\r\n                <AutoPopulate\r\n                    todo={(fromChild) => setAutoPopulationSchedule(fromChild)}\r\n                />\r\n                    <PrimaryButton\r\n                        style={{\r\n                            align: 'left',\r\n                        }}\r\n                        onClick={(e) => sendAutoPopulatedShiftsToDB()}\r\n                    >\r\n                        Submit Shifts To Database\r\n                    </PrimaryButton>\r\n                </div>\r\n\r\n                <MyCalendar\r\n                    events={AutoPopulationSchedule}\r\n                    onSelectEvent={handleDelete}\r\n                    onSelectSlot={handleSelect}\r\n                    dayPropGetter={handleBlackoutDate}\r\n                    draggableAccessor={(event) => true}\r\n                    onEventDrop={moveEvent}\r\n                    onEventResize={resizeEvent}\r\n                />\r\n        </Card>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { Card, PrimaryButton, TitleText, SubtitleText } from './../Styles/StyledComponents'\r\nimport { CreateUser, DeleteUser } from '../API/Mutations/User'\r\nimport Form from 'react-bootstrap/Form'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Col from 'react-bootstrap/Col'\r\nimport { Input, Button } from 'semantic-ui-react'\r\nimport fb from './../../../firebase'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport UsernameInput from './../Components/UsernameInput'\r\n// declaration for all use states \r\nexport default function Admin(props) {\r\n    const [loading, setLoading] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [success, setSuccess] = useState(false)\r\n    const [password, setPassword] = useState('')\r\n    const [firstName, setFirstName] = useState('')\r\n    const [lastName, setLastName] = useState('')\r\n    const [isEmployee, setIsEmployee] = useState(true)\r\n    const [deleteEmail, setDeleteEmail] = useState('')\r\n    const [error, setError] = useState(false)\r\n\r\n    // declaration of the mutation to create a user\r\n    const [createUser, { loading: createLoading }] = useMutation(CreateUser, {\r\n        onError(e) {\r\n            setError({ title: 'Error Creating User!', message: e.message })\r\n        },\r\n        onCompleted({ createUser }) {\r\n            setEmail('')\r\n            setFirstName('')\r\n            setLastName('')\r\n            setPassword('')\r\n            setSuccess(\r\n                `${createUser.firstName}'s account has been successfully created!`\r\n            )\r\n            setLoading(false)\r\n            setIsEmployee(true)\r\n        },\r\n    })\r\n\r\n    // declaration of the mutation to delete a user\r\n    const [deleteUser, { loading: deleteLoading }] = useMutation(DeleteUser, {\r\n        onError(e) {\r\n            setError({ title: 'Error Deleting User!', message: e.message })\r\n        },\r\n        onCompleted({ deleteUser }) {\r\n            setLoading(false)\r\n            if (deleteUser) {\r\n                setSuccess('User successfully deleted!')\r\n                setDeleteEmail('')\r\n            } else {\r\n                setError({\r\n                    title: 'Error Deleting User!',\r\n                    message: 'Unable to find a user with that email.',\r\n                })\r\n            }\r\n        },\r\n    })\r\n\r\n    // Set loading to true if anything is loading\r\n    useEffect(() => {\r\n        if (createLoading || deleteLoading) setLoading(true)\r\n    }, [createLoading, deleteLoading])\r\n\r\n    // deletes the user based on the email\r\n    const handleDeleteUser = async (e) => {\r\n        e.preventDefault()\r\n        deleteUser({ variables: { email: formatEmail(deleteEmail) } })\r\n    }\r\n\r\n    // formtas the email to whatever email the users should be using in the work site such as a company email\r\n    const formatEmail = (state) => {\r\n        if (state.includes('@')) return state\r\n        else return `${state}@islander.tamucc.edu`\r\n    }\r\n\r\n    // handler to check for invalid fields such as leaving the first or last name blank when trying to create a user\r\n    const handleCreateUser = async (e) => {\r\n        e.preventDefault()\r\n        if (firstName.length < 1) {\r\n            setError({\r\n                title: 'Cannot Create user.',\r\n                message: 'A first name is required.',\r\n            })\r\n        } else if (lastName.length < 1) {\r\n            setError({\r\n                title: 'Cannot Create user.',\r\n                message: 'A last name is required.',\r\n            })\r\n        } else {\r\n            try {\r\n                //    Create user in firebase for authentication\r\n                const {\r\n                    user: { uid: firebaseID, email: firebaseEmail },\r\n                } = await fb\r\n                    .auth()\r\n                    .createUserWithEmailAndPassword(\r\n                        formatEmail(email),\r\n                        password\r\n                    )\r\n                // Create user in the database to store information\r\n                createUser({\r\n                    variables: {\r\n                        firebaseID,\r\n                        first: firstName,\r\n                        last: lastName,\r\n                        userType: isEmployee ? 'Employee' : 'Admin',\r\n                        email: firebaseEmail,\r\n                    },\r\n                })\r\n            } catch (e) {\r\n                setError({ title: 'Error Creating User!', message: e.message })\r\n            }\r\n        }\r\n    }\r\n\r\n    // Alert to let the admin know whether or not the action worked or failed\r\n    const genericAlert = (type) => {\r\n        let onPress = () => setSuccess(false)\r\n        let title = 'Success!'\r\n        let message = success\r\n        let variant = 'success'\r\n        if (type === 'error') {\r\n            onPress = () => setError(false)\r\n            title = error.title\r\n            message = error.message\r\n            variant = 'danger'\r\n        }\r\n        return (\r\n            <Alert\r\n                style={{ position: 'absolute', top: '3vh', right: '40vw' }}\r\n                variant={variant}\r\n                onClose={onPress}\r\n                dismissible\r\n            >\r\n                <Alert.Heading>{title}</Alert.Heading>\r\n                <p>{message}</p>\r\n                <hr />\r\n\r\n                <div className='d-flex justify-content-end'>\r\n                    <PrimaryButton onClick={onPress} variant='outline-success'>\r\n                        Okay\r\n                    </PrimaryButton>\r\n                </div>\r\n            </Alert>\r\n        )\r\n    }\r\n\r\n    // graphical alerts for success or error\r\n    const renderErrorAlert = () => {\r\n        return genericAlert('error')\r\n    }\r\n\r\n    const renderSuccessAlert = () => {\r\n        return genericAlert('success')\r\n    }\r\n\r\n    const renderInput = ({\r\n        title,\r\n        onChange,\r\n        type = 'text',\r\n        icon,\r\n        autoComplete,\r\n        value,\r\n    }) => {\r\n        return (\r\n            <Form.Group\r\n                style={{ flex: 1, display: 'flex', flexDirection: 'column' }}\r\n            >\r\n                <Form.Label>{title}</Form.Label>\r\n                <Input\r\n                    icon={icon}\r\n                    iconPosition={'left'}\r\n                    onChange={({ target: { value } }) => onChange(value)}\r\n                    type={type}\r\n                    placeholder={`${title}...`}\r\n                    autoComplete={autoComplete}\r\n                    value={value}\r\n                />\r\n            </Form.Group>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card style={{width: '95%'}}>\r\n\r\n        <div style={{ width: '80%' }}>\r\n\r\n            <TitleText style={{fontSize: '3.2rem'}}> Admin</TitleText>\r\n            \r\n            <SubtitleText>Here you may create and delete new Employees or Admin users.</SubtitleText>\r\n            <br />\r\n            <br />\r\n            {error && renderErrorAlert()}\r\n            {success && renderSuccessAlert()}\r\n            <h2>Create</h2>\r\n            <Form\r\n                style={{ width: '80%' }}\r\n                onSubmit={(e) => handleCreateUser(e)}\r\n            >\r\n                <Form.Row style={{ width: '85%' }}>\r\n                    <UsernameInput\r\n                        containerStyle={{\r\n                            display: 'flex',\r\n                            width: '50%',\r\n                            flexDirection: 'column',\r\n                        }}\r\n                        onChange={(text) => setEmail(text)}\r\n                        value={email}\r\n                    />\r\n                    {renderInput({\r\n                        // input row for password\r\n                        title: 'Password',\r\n                        autoComplete: 'password',\r\n                        icon: 'lock',\r\n                        onChange: setPassword,\r\n                        value: password,\r\n                    })}\r\n                </Form.Row>\r\n                <Form.Row\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'row',\r\n                        width: '85%',\r\n                    }}\r\n                >\r\n                    {renderInput({\r\n                        // input row for first name\r\n                        title: 'First Name',\r\n                        icon:'pencil alternate',\r\n                        onChange: setFirstName,\r\n                        value: firstName,\r\n                    })}\r\n                    {renderInput({\r\n                        // input row for last name\r\n                        title: 'Last Name',\r\n                        icon:'pencil alternate',\r\n                        onChange: setLastName,\r\n                        value: lastName,\r\n                    })}\r\n                </Form.Row>\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        width: '50%',\r\n                    }}\r\n                >\r\n                    <Form.Label>User Type</Form.Label>\r\n                    <Button.Group toggle={true}>\r\n                        <Button\r\n                        // button to set the user to an employee\r\n                            type='button'\r\n                            onClick={() => setIsEmployee(true)}\r\n                            positive={isEmployee}\r\n                        >\r\n                            Employee\r\n                        </Button>\r\n                        <Button.Or />\r\n                        <Button\r\n                        // button to set the new user to an admin\r\n                            type='button'\r\n                            onClick={() => setIsEmployee(false)}\r\n                            positive={!isEmployee}\r\n                        >\r\n                            Admin\r\n                        </Button>\r\n                    </Button.Group>\r\n                    <PrimaryButton disabled={loading || error} type='submit'>\r\n                        Create User\r\n                    </PrimaryButton>\r\n                </div>\r\n            </Form>\r\n            <hr height={2} fill={'black'} />\r\n            <h2>Delete</h2>\r\n            <Form\r\n                style={{ width: '80%' }}\r\n                onSubmit={(e) => handleDeleteUser(e)}\r\n            >\r\n                <UsernameInput\r\n                // user input to delet the user\r\n                    containerStyle={{\r\n                        display: 'flex',\r\n                        width: '42%',\r\n                        flexDirection: 'column',\r\n                    }}\r\n                    onChange={(text) => setDeleteEmail(text)}\r\n                    value={deleteEmail}\r\n                />\r\n                <PrimaryButton disabled={loading || error} type='submit'>\r\n                    Delete User\r\n                </PrimaryButton>\r\n            </Form>\r\n        </div>\r\n        </Card>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { AuthContext } from './../Components/Auth'\r\nexport default function Logout(props) {\r\n    const { setUser } = useContext(AuthContext)\r\n    setUser(null)\r\n    localStorage.clear()\r\n    props.history.push('/')\r\n    return <div></div>\r\n}\r\n","import Screens from '../Screens'\nimport { Icon } from 'semantic-ui-react'\nimport { TitleText, Navlink, SubtitleText } from './../Styles/StyledComponents'\nimport Account from '../Screens/Account'\nimport React, { useContext } from 'react'\nimport { AuthContext } from './Auth'\n\nconst logo = require('../Images/IndaysLogo.png')\nexport default function Header() {\n    const { user } = useContext(AuthContext)\n    return (\n        <div\n            style={{\n                display: 'flex',\n                flexDirection: 'row',\n                height: '16vh',\n                width: '100vw',\n                textAlign: 'left',\n            }}\n        >\n            <TitleText style={{ fontSize: '6rem' }}>\n                Employee Dashboard\n            </TitleText>\n            <div\n                style={{\n                    flex: 1,\n                    display: 'flex',\n                    justifyContent: 'space-evenly',\n                    alignItems: 'center',\n                    marginRight: '2vw',\n                    fontSize: '2rem',\n                }}\n            >\n                <img\n                    align='middle'\n                    src={logo}\n                    alt='logo'\n                    style={{ height: '23vh' }}\n                />\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        textAlign: 'center',\n                    }}\n                >\n                    <Icon name='user circle' size='big' />\n                    <span>\n                        {user.firstName} {user.lastName}\n                    </span>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { useContext, Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Screens from '../Screens'\r\n//import { Navlink as Button } from './../Styles/StyledComponents'\r\nimport { AuthContext } from './Auth'\r\nimport { Button, Menu } from 'semantic-ui-react'\r\nimport { SecondButton} from './../Styles/StyledComponents'\r\nexport default function Navbar() {\r\n    const { user } = useContext(AuthContext)\r\n    let screensToRender = [...Screens]\r\n    if (user.userType != 'Admin') {\r\n        screensToRender = screensToRender.filter(\r\n            ({ name }) => name !== 'Admin' && name !== 'Schedule'\r\n        )\r\n    }\r\n    return (\r\n        <ul\r\n            className='Navbar'\r\n            style={{\r\n                fontfamily: 'Poppins',\r\n                fontstyle: 'normal',\r\n                fontweight: 'normal',\r\n                height: '100vh',\r\n                listStyle: 'none',\r\n            }}\r\n        >\r\n            {/* This will make all screens as a navbar item */}\r\n            {screensToRender.map((screen) => {\r\n                return (     \r\n                    <li>\r\n                        <Button.Group widths='4'\r\n                            className='tags'\r\n                            exact={true}\r\n                            as={NavLink}\r\n                            to={`${screen.path}`}\r\n                        >\r\n                            <SecondButton>{screen.name}</SecondButton>\r\n                        </Button.Group> \r\n                    </li>\r\n                   \r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport Header from './Header'\nimport Navbar from './Navbar'\nimport { AuthContext } from './Auth'\n// This is the component that simply checks if the user is authenticated before proceeding to the route.\nexport const ProtectedRoute = ({ component: Component, ...rest }) => {\n    const { user } = useContext(AuthContext)\n    return (\n        <Route\n            {...rest}\n            render={(props) => {\n                if (user) {\n                    return (\n                        <div>\n                            <Header />\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    flexDirection: 'row',\n                                    alignItems: 'flex-start',\n                                }}\n                            >\n                                <Navbar />\n                                <div\n                                    style={{\n                                        justifyContent: 'center',\n                                        display: 'flex',\n                                        flex: 'auto',\n                                    }}\n                                >\n                                    <Component {...props} />\n                                </div>\n                            </div>\n                        </div>\n                    )\n                } else {\n                    return <Redirect to={'/'} />\n                }\n            }}\n        />\n    )\n}\n","import { useLazyQuery, useMutation } from '@apollo/react-hooks'\r\nimport moment from 'moment'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport Form from 'react-bootstrap/Form'\r\nimport { ClockIn, ClockOut } from '../API/Mutations/User'\r\nimport { GetUserByFirebaseID } from '../API/Queries/User'\r\nimport Screens from '../Screens'\r\nimport '../Styles/Login.css'\r\nimport fb from './../../../firebase'\r\nimport { AuthContext } from './../Components/Auth'\r\nimport UsernameInput from './../Components/UsernameInput'\r\nimport {\r\n    Card,\r\n    PrimaryButton,\r\n    SubtitleText,\r\n    TitleText,\r\n} from './../Styles/StyledComponents'\r\nimport { Input } from 'semantic-ui-react'\r\nconst logo = require('../Images/IndaysLogo.png')\r\n\r\nmoment.locale('en')\r\n// This will be changed to david's login component when it is finished\r\nexport default function Login(props) {\r\n\r\n    //states or variables consist of\r\n    //username, password, loading, error and success\r\n    const [userName, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(false)\r\n    const [success, setSuccess] = useState(false)\r\n\r\n    const clockComplete = (type) => {\r\n        setLoading(false)\r\n        setSuccess(`You have been clocked ${type}`)\r\n    }\r\n\r\n    const [clockIn, { loading: clockInLoading }] = useMutation(ClockIn, {\r\n        onError(e) {\r\n            setError({ title: 'Error Clocking In!', message: e.message })\r\n        },\r\n        onCompleted({ clockIn }) {\r\n            clockComplete('in')\r\n        },\r\n    })\r\n    const [clockOut, { loading: clockOutLoading }] = useMutation(ClockOut, {\r\n        onError(e) {\r\n            setError({ title: 'Error Clocking Out!', message: e.message })\r\n        },\r\n        onCompleted({ clockOut }) {\r\n            clockComplete('out')\r\n        },\r\n    })\r\n    const [getUserByFirebaseID, { loading: getUserLoading }] = useLazyQuery(\r\n        GetUserByFirebaseID,\r\n        {\r\n            onError(e) {\r\n                setLoading(false)\r\n                setError({ title: 'Error Logging In!', message: e.message })\r\n                localStorage.clear()\r\n            },\r\n            onCompleted({ getUserByFirebaseID }) {\r\n                setLoading(false)\r\n                if (getUserByFirebaseID) {\r\n                    const { _id, firebaseID } = getUserByFirebaseID\r\n                    localStorage.setItem('currentUserID', _id)\r\n                    localStorage.setItem('currentUserFirebaseID', firebaseID)\r\n                    setUser(getUserByFirebaseID)\r\n                    props.history.push('/overview')\r\n                } else {\r\n                    setError({\r\n                        title: 'Error Logging In!',\r\n                        message: 'Could not find a user with that ID',\r\n                    })\r\n                    localStorage.clear()\r\n                }\r\n            },\r\n        }\r\n    )\r\n\r\n    const { user, setUser } = useContext(AuthContext)\r\n\r\n\r\n    /*\r\n    Function Name: getLocation\r\n    Parameter: inOrOut - a string whether clock in 'in' or clock out 'out'\r\n\r\n    The main functionality of this function is to check the clock in/clock out location\r\n    */\r\n    const getLocation = (inOrOut) => {\r\n        function CheckBrowser({ coords: { latitude, longitude } }) {\r\n            const variables = {\r\n                location: `Latitude: ${latitude}, Longitude: ${longitude}`,\r\n                time: moment().format('MMMM Do YYYY, h:mm:ss a'),\r\n                email: formatUsername(),\r\n            }\r\n            if (inOrOut === 'in') clockIn({ variables })\r\n            else if (inOrOut === 'out') clockOut({ variables })\r\n        }\r\n\r\n        function ERROR(e) {\r\n            setError({\r\n                title: `Unable to Clock ${inOrOut}!`,\r\n                message: e.message,\r\n            })\r\n        }\r\n\r\n        //if navigator does not exist or is supported by the browser that  set error message\r\n        //else - if the location is accessible then get the location\r\n        if (!navigator.geolocation)\r\n            setError({\r\n                title: `Unable to Clock ${inOrOut}!`,\r\n                message: 'Geolocation is not supported by your browser',\r\n            })\r\n        else navigator.geolocation.getCurrentPosition(CheckBrowser, ERROR)\r\n    }\r\n\r\n    // This is called to auto-login a user if saved\r\n    useEffect(() => {\r\n        const storedFirebaseID = localStorage.getItem('currentUserFirebaseID')\r\n        if (user) {\r\n            props.history.push(Screens[0].path)\r\n        } else if (!getUserLoading && storedFirebaseID) {\r\n            getUserByFirebaseID({ variables: { firebaseID: storedFirebaseID } })\r\n        }\r\n    }, [getUserByFirebaseID, getUserLoading, props.history, user])\r\n\r\n    // Used to set one loading state if any of the functions are loading\r\n    useEffect(() => {\r\n        if (clockInLoading || clockOutLoading || getUserLoading)\r\n            setLoading(true)\r\n        else setLoading(false)\r\n    }, [clockInLoading, clockOutLoading, getUserLoading])\r\n\r\n\r\n    /*\r\n   Function Name: formatUsername\r\n   Parameter: -\r\n\r\n   The main functionality of this function is to check the entered email to log in includes a character '@' \r\n   if it includes @ and then use it normally\r\n   if not then add '@islander.tamucc.edu'\r\n   */\r\n    const formatUsername = () => {\r\n        if (userName.includes('@')) return userName\r\n        else return `${userName}@islander.tamucc.edu`\r\n    }\r\n\r\n\r\n    /*\r\n    Function Name: handleLoginPressed\r\n    Parameter: e - native windows event\r\n\r\n    The main functionality of this function is to set some context that is given from the database after the user login\r\n    it handles login error as well, by showing a custom alert\r\n    */\r\n    const handleLoginPressed = async (e) => {\r\n        // Prevent screen refresh or re-render \r\n        e.preventDefault()\r\n\r\n        // Say it is loading\r\n        setLoading(true)\r\n\r\n        // Get the user's auth from firebase for their firebaseID\r\n        try {\r\n            const {\r\n                user: { uid: firebaseID },\r\n            } = await fb\r\n                .auth()\r\n                .signInWithEmailAndPassword(formatUsername(), password)\r\n\r\n            // Get the full user from the database with that firebaseID\r\n            getUserByFirebaseID({ variables: { firebaseID } })\r\n        } catch (e) {\r\n            // Display any errors\r\n            setError({ title: 'Error Logging In!', message: e.message })\r\n            // Set loading as done regardless\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n   Function Name: renderErrorAlert\r\n   Parameter: -\r\n\r\n   render function, it renders error alert \r\n   */\r\n    const renderErrorAlert = () => {\r\n        return (\r\n            <Alert\r\n                style={{ position: 'absolute', top: '3vh', right: '40vw' }}\r\n                variant='danger'\r\n                onClose={() => setError(false)}\r\n                dismissible\r\n            >\r\n                <Alert.Heading>{error.title}</Alert.Heading>\r\n                <p>{error.message}</p>\r\n                <hr />\r\n\r\n                <div className='d-flex justify-content-end'>\r\n                    <PrimaryButton\r\n                        onClick={() => setError(false)}\r\n                        variant='outline-success'\r\n                    >\r\n                        Okay\r\n                    </PrimaryButton>\r\n                </div>\r\n            </Alert>\r\n        )\r\n    }\r\n\r\n\r\n    /*\r\n   Function Name: renderSuccessAlert\r\n   Parameter: -\r\n\r\n   render function, it renders sunccess alert \r\n   */\r\n    const renderSuccessAlert = () => {\r\n        return (\r\n            <Alert\r\n                style={{ position: 'absolute', top: '3vh', right: '40vw' }}\r\n                variant='success'\r\n                onClose={() => setSuccess(false)}\r\n                dismissible\r\n            >\r\n                <Alert.Heading>Success!</Alert.Heading>\r\n                <p>{success}</p>\r\n                <hr />\r\n                <div className='d-flex justify-content-end'>\r\n                    <PrimaryButton\r\n                        onClick={() => setSuccess(false)}\r\n                        variant='outline-success'\r\n                    >\r\n                        Okay\r\n                    </PrimaryButton>\r\n                </div>\r\n            </Alert>\r\n        )\r\n    }\r\n\r\n\r\n    /*\r\n    Function Name: handleResetPressed\r\n    Parameter: -\r\n\r\n    it is an asynchronous function that handle users to reset their password,\r\n    when the button is clicked, it checks the username whether it exist in the database then allow it to reset their password\r\n    */\r\n    const handleResetPressed = async () => {\r\n        //if username string length is not enough the set error message\r\n        if (userName.length < 2) {\r\n            setError({\r\n                title: 'Whoops!',\r\n                message: 'Please enter your username to reset your password.',\r\n            })\r\n            return\r\n        }\r\n        try {\r\n            await fb.auth().sendPasswordResetEmail(formatUsername())\r\n            setSuccess(\r\n                'A link to reset your pasword has been sent to your email!'\r\n            )\r\n        } catch (e) {\r\n            setError({ title: 'Error Resetting Password', message: e.message })\r\n        }\r\n    }\r\n\r\n    /*\r\n   Function Name: makeCard\r\n   Parameter: -\r\n\r\n   render function, it renders the main card that consist all the of the main functionality in this screen such as\r\n   header\r\n   subheader\r\n   email text input\r\n   password text input\r\n   forgot password button\r\n   login button\r\n   clock in button\r\n   clock out button\r\n   */\r\n    const makeCard = () => {\r\n        return (\r\n            <Card  style={{\r\n                backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n            }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        textAlign: 'left',\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        flexDirection: 'column',\r\n                        width: '30vw',\r\n                    }}\r\n                >\r\n                    <TitleText> Login</TitleText>\r\n                    <SubtitleText>\r\n                        Clock-in with your username\r\n                        <br />\r\n                        Log-in with your username and password\r\n                    </SubtitleText>\r\n                    <Form onSubmit={handleLoginPressed}>\r\n                        <UsernameInput\r\n                            containerStyle={{\r\n                                display: 'flex',\r\n                                width: '62.5%',\r\n                                flexDirection: 'column',\r\n                            }}\r\n                            onChange={(text) => setUsername(text)}\r\n                            value={userName}\r\n                        />\r\n                        <Form.Group\r\n                            style={{ flexDirection: 'column', display: 'flex' }}\r\n                        >\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Input\r\n                                icon='lock'\r\n                                iconPosition='left'\r\n                                type='password'\r\n                                placeholder='Password...'\r\n                                onChange={({ target: { value } }) =>\r\n                                    setPassword(value)\r\n                                }\r\n                                autoComplete='password'\r\n                                style={{ width: '62.5%' }}\r\n                            />\r\n                            <u onClick={handleResetPressed}>Forgot Password?</u>\r\n                        </Form.Group>\r\n                        <PrimaryButton\r\n                            disabled={loading || error}\r\n                            type='submit'\r\n                        >\r\n                            Login\r\n                        </PrimaryButton>\r\n                    </Form>\r\n                    <PrimaryButton\r\n                        disabled={loading || error}\r\n                        onClick={() => getLocation('in')}\r\n                    >\r\n                        Clock In\r\n                    </PrimaryButton>\r\n                    <PrimaryButton\r\n                        disabled={loading || error}\r\n                        onClick={() => getLocation('out')}\r\n                    >\r\n                        Clock Out\r\n                    </PrimaryButton>\r\n                </div>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    //the whole screen consist background, main card, and alerts that are initially invisible\r\n    return (\r\n        <div\r\n            id='background'\r\n            style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                width: '100vw',\r\n                height: '100vh',\r\n                justifyContent: 'space-around',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            <img\r\n                src={logo}\r\n                alt='indays logo'\r\n                style={{\r\n                    height: '30vh',\r\n                    backgroundColor: 'rgba(255, 255, 255, 0.53)',\r\n                    borderRadius: '15vh',\r\n                }}\r\n            />\r\n            {error && renderErrorAlert()}\r\n            {success && renderSuccessAlert()}\r\n            {makeCard()}\r\n        </div>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from 'apollo-boost'\n\n// Client Docs: https://www.apollographql.com/docs/react/\n\nconst Client = new ApolloClient({\n    uri: 'https://bookworms-api.herokuapp.com/graphql'\n})\n\nexport default Client\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index/index.css'\nimport App from './index/App'\nimport * as serviceWorker from './index/serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport Client from './index/App/API/Client'\n\n// This will register our app with firebase, which will allow us to authenticate users.\n\nReactDOM.render(\n    <ApolloProvider client={Client}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </ApolloProvider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport { ProtectedRoute } from './App/Components/ProtectedRoute'\nimport Login from './App/Screens/Login'\nimport { Route, Switch } from 'react-router-dom'\nimport Screens from './App/Screens'\nimport './App/Styles/App.css'\nimport { AuthProvider } from './App/Components/Auth'\nexport default function App() {\n    return (\n        <AuthProvider>\n            <Switch>\n                <Route exact path='/' component={Login} />\n                {Screens.map((screen) => {\n                    return (\n                        <ProtectedRoute\n                            exact\n                            path={`${screen.path}`}\n                            component={screen.component}\n                        />\n                    )\n                })}\n                <Route path='*' component={Login} />\n            </Switch>\n        </AuthProvider>\n    )\n}\n"],"sourceRoot":""}